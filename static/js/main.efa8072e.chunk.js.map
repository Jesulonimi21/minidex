{"version":3,"sources":["utils/utils.js","logo.svg","screens/ApSales.js","assets/images/replicantImage.jpeg","screens/HomeScreen.js","screens/Home.js","screens/ReplicantNftCreation.js","screens/ManageReplicantNft.js","App.js","reportWebVitals.js","index.js"],"names":["createAsa","params","from","assetName","assetUnitName","assetDecimals","assetTotal","assetUrl","assetFreeze","assetManager","assetReserve","assetDefaultFrozen","assetMetadataHash","note","fee","flatFee","type","assetURL","assetClawback","connectToWallet","myalgoconnect","Promise","resolve","reject","a","connect","addresses","isConnected","length","addr","console","log","error","replicantAsaInfo","name","unit","url","total","metadataHash","Uint8Array","Buffer","decimals","getAsaToClawbackInfo","sender","assetClawbackAddresses","map","el","index","assetIndex","compileReplicantProgram","client","compile","do","results","compileClearProgram","updateApplication","appId","approvalProgram","clearProgram","appIndex","appOnComplete","appApprovalProgram","appClearProgram","useStyles","makeStyles","theme","root","flexGrow","marginTop","marginLeft","marginRight","paper","padding","spacing","textAlign","color","palette","text","secondary","height","display","flexDirection","alignItems","position","typohraphy","fontSize","horDiv","justifyContent","buttonDiv","width","progress","top","left","ApSales","neilBerloufa","sarahLosena","aliceBucknell","juanCoveli","alexandra","amandaRoss","hiradSab","epochBase64Address","useState","P1Loading","setP1Loading","P2Loading","setP2Loading","P3Loading","setP3Loading","P4Loading","setP4Loading","P5Loading","setP5Loading","P6Loading","setP6Loading","P7Loading","setP7Loading","D1Visible","setD1Visible","D1Text","setD1Text","D1Title","setD1Title","handleCloseD1","D2Visible","setD2Visible","D2Text","setD2Text","D2Title","setD2Title","handleCloseD2","D3Visible","setD3Visible","D3Text","setD3Text","D3Title","setD3Title","handleCloseD3","D4Visible","setD4Visible","D4Text","setD4Text","D4Title","setD4Title","handleCloseD4","D5Visible","setD5Visible","D5Text","setD5Text","D5Title","setD5Title","handleCloseD5","D6Visible","setD6Visible","D6Text","setD6Text","D6Title","setD6Title","handleCloseD6","D7Visible","setD7Visible","D7Text","setD7Text","D7Title","setD7Title","handleCloseD7","program","lsig","algosdk","makeLogicSig","MyAlgoConnect","assetIds","applicationId","token","Algodv2","classes","Indexer","className","Grid","container","item","xs","Paper","elevation","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","autoFocus","CircularProgress","Typography","variant","style","wordWrap","inline","getTransactionParams","appCallTxn","makeApplicationCallTransaction","address","zeroSendTxn","sendFunds","assetSendTxn","sendAsset","txns","groupId","computeGroupID","group","signedTxn0","signLogicSigTransaction","signedTxns","signTransaction","JSON","stringify","blobs","blob","signedTest","txTest","sendRawTransaction","txId","undefined","appArgs","receiver","amount","to","assetID","revocationTarget","recipient","units","algodClient","xtxn","makeAssetTransferTxnWithSuggestedParams","replicantImage","borderRadius","border","borderColor","itemTitle","primary","main","itemButton","HomeScreen","history","useHistory","src","push","Home","centerGridItem","ReplicantNftCreation","loading","setLoading","dialogVisible","controlDialog","dialogTitle","setDialogTitle","dialogDescription","setDialogDescription","connector","WalletConnect","bridge","qrcodeModal","QRCodeModal","connected","createSession","on","payload","accounts","makeAssetCreateTxnWithSuggestedParams","txnsToSign","txn","encodeUnsignedTransaction","toString","message","requestParams","request","formatJsonRpcRequest","sendCustomRequest","result","decodedResult","element","killSession","makeAssetConfigTxnWithSuggestedParams","signerAddress","epochAddress","compiledApprovalProgram","compiledClearProgram","updateAppTxns","updateAppTxn","alert","menuButton","title","list","fullList","App","props","anchor","React","bottom","right","state","setState","pageTitle","setPageTitle","toggleDrawer","event","key","AppBar","Toolbar","IconButton","edge","Drawer","role","onKeyDown","List","ListItem","button","ListItemIcon","ListItemText","path","ManageReplicantNft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efa8072e.chunk.js","sourcesContent":["export function createAsa(params,from,assetName, assetUnitName,assetDecimals,assetTotal,assetUrl,assetFreeze,assetManager,assetReserve,assetDefaultFrozen,assetMetadataHash,note){\n    let  txn = {\n       ...params,\n       fee: 1000,\n       flatFee: true,\n       type: 'acfg',\n       from: from,\n       assetName: assetName,\n       assetUnitName: assetUnitName,\n       assetDecimals: assetDecimals,\n       assetTotal: assetTotal,\n       assetURL: assetUrl,\n       assetFreeze: assetFreeze,\n       assetManager: assetManager,\n       assetReserve: assetReserve,\n       assetDefaultFrozen: assetDefaultFrozen,\n       assetClawback:from,\n       assetMetadataHash,\n       note\n     };\n   return txn;\n }\n export function clawbackAsa(params,sender,assetIndex,assetFreeze,assetManager,assetReserve,assetClawback){\n    let  txn = {\n         ...params,\n         fee: 1000,\n         flatFee: true,\n         type: 'acfg',\n         from: sender,\n         assetIndex: assetIndex,\n         assetFreeze: assetFreeze,\n         assetManager: assetManager,\n         assetReserve: assetReserve,\n         assetClawback:assetClawback\n       };\n \n       return txn;\n }\n export function connectToWallet(myalgoconnect){\n    return new Promise(async(resolve,reject)=>{\n        let addresses;\n        try{\n            addresses = await myalgoconnect.connect();\n            resolve(addresses)\n        }catch(error){\n            reject(error);\n        }       \n    });\n}\n\nexport async function isConnected(addresses,myalgoconnect){\n    return new Promise(async(resolve,reject)=>{\n        if(addresses.length==0){\n            try{\n               let addr =  await connectToWallet(myalgoconnect)\n               addresses= addr;\n               console.log(addr);\n               resolve(addresses);\n            }catch(error){\n             console.error(error);\n              reject(false);    \n            } \n         }else{\n              resolve(true);\n         }\n    })\n}\n\nexport const replicantAsaInfo =[\n    {\n        name:`EPOCH, \"REPLICANTS,\" 1/20`,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/R\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"ade0c8cffa3e9744d03f28bacbcad7fa\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 2/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/S\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"c2ee12c2130a1adb33fc9e6c5df2a6f9\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 3/20',\n        unit:\"EPOCH\",\n        url:\"hhttps://api.uncopied.art/c/v/T\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"0df8673ca2baad10052770879f454182\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 4/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/U\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"a44b20ee6eadae2a8566c98646f8953d\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 5/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/V\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"493b944add91650c343c667da1d2778a\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 6/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/W\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"2774e1768a91295e5f4a2c4196552766\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 7/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/X\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"2dcdf8eea215622a3b3e3a57564a8e3f\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 8/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/Y\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"ce6dd633727e11f1d3dc11ec44200a4a\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 9/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/Z\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"57c5fb965fd5e75d4547096be05e62a5\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 10/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/a\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"193a34f7ef614104d0cc29e38317cadf\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 11/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/b\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"9800a1645372a1d00de5286bc92b3620\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 12/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/c\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"08239aa24a16d71e0cfcfea13ab78eb1\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 13/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/d\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"a069d6a47f72561e7e99394940eef53b\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 14/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/e\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"f1f63507e06a43f01d777d7dea867273\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 15/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/f\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"e893d6016514d054ba9f8d02f10617e0\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 16/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/g\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"df3cdeebfe1ef4306244dcad8a31bd17\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 17/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/h\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"c3cb26cc3a850343a7adf98d34cb2ebe\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 18/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/i\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"e2ab0dcc6dd7ed08702d7f99b43bfcfd\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 19/20' ,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/j\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"f30cf70d2f5f96fa66f9337674106c77\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 20/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/k\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"c06c6f36a68e6db14227e83d72a241f6\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 1/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/l\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"68ee4013dd013439022559a56be3f258\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },  \n    {\n        name:'EPOCH, \"REPLICANTS,\" 2/10 AP' ,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/m\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"b29804cf8204806934e996fba6163174\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 3/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/n\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"26a7b7b04ae7d90de6bfb43bde23a34b\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 4/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/o\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"720fea36a4928468c1964f7353ae17c7\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },  \n\n    {\n        name:'EPOCH, \"REPLICANTS,\" 5/10 AP' ,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/p\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"759e329bf37330a58be15a90aa909136\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 6/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/q\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"24f0b1122f8b7c3fb23c72120868f6fb\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 7/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/r\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"6d02874a0dac7ca9f633156808b818f3\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },  \n    {\n        name:'EPOCH, \"REPLICANTS,\" 8/10 AP' ,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/s\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"f1cde5d61ea606ccf3673eca97a47dc7\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 9/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/t\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"2ebddddf90bc009250ce8404805033c1\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 10/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/u\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"ad73a489fe67dbf6ffb508f37ba9483d\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },  \n\n]\n\nexport function getAsaToClawbackInfo(params,sender, assetFreeze,assetManager,assetReserve,assetClawback){\n    const asaArray = [386913126, 386913127, 386913128, 386913129, 386913130, 386913131, 386913132, 386913133, 386913134, 386913135, 386913136, 386913137, 386913138, 386913139, 386913140, 386913141, 386913521, 386913522, 386913523, 386913524, 386913525, 386913526, 386913527, 386913528, 386913529, 386913530, 386913531, 386913532, 386913533,  386913534  ];\n    let assetClawbackAddresses = [\n        'I4ZSBYX3VWK2YTXJUL5OYGHSGWMDFUKAGIYVMKJ2IYKL6BAIMOIDXMQXIU',\n        'WOJ2IVQZQPL6AUGFQRS3MBXMZU5OHHJF7TTYMS6AJYCFOVFNIVGP5LEMPY',\n        'A2SVRPFMMK4C3UT7DH2K2T67ZSAWULRWWJ2MXM35KP4PUXACVV36H3TJ3Q',\n        '4QHKQTHOPX56EZ4BHB3XQH4A67XTC5W6RQWVLHVML24TZXWC6SI7D7TRUA',\n        'CKU7IAJAOJCD7O2GUQU4AJAD2RAR75MXJOOV33DBYATZNC5BSHTTEOT6IE',\n        'GA7AGJTASCQVXRCN37UWOVJABR6R3ZV3I2CYL3RXWDPYM62OKRNCL3EPHI',\n        '7BSRUQJ6HISD64J6NDRQUPTJ4V2KID2CRWJDLGYVVJSCIDOTTXOBN7DRBM',\n        'GV45TIXAM5UKCDJAYYX5YZDMKCAPY5JKOQ6AFCBQ74A7AABSRTK24HLL6I',\n        'WI4WKILJUFLC2B2ZJCAGXLDIIDDL2ANMYVOVAWRG6UC5D47VHFNNJVK6LI',\n        'FAZ5K4IUAU3QHPYL6BNNMIZNJLCCH23CNU5ZM6TIWMQWINMQZLOAW4BTZQ',\n        'OLDAM3X7AB27UELP6PB2IFOMQDPQGVXTYQVB3ZPF7CCNOPPNKXUP77NXWA',\n        'PLKZCOUQN7XKM5JWPHLA4QMFPGK5UBFDG5CJL3NWR5TGHXPCMZN46QXUOY',\n        '4LEGSUWJ7AQC6PF6G2YGE44MAVZHQVESPU32L5DMGJ624AFGVF6OPXVK4Y',\n        'RC57SFERNNM5W635Z7RVYYXKHLCFHXEPLJNMVC7NMUDHIHZP42KV3E6QA4',\n        'IYXVCSD6HQVB3H3LXEZYR5YOKFX3ZRD6UVED3BUDJAQYGP6RRYZUPBY4ZU',\n        'RDZU72UJ37724XIMMRCEHS3XB6B6SZZ7SVXGYRFWU5PZNY4EJU22HRO5NE',\n        '7H4RWJ65Y65THWFF3OR3Q74PRGVMPZWVMFCKBEICUXSQRLPFH6QXMIYXRE',\n        'AYD43MHQB7RSMD6XAWLTH7CRPUAVINRLOUYHHKUEXYO5QKGGUWDAN63WJU',\n        'GYPGD6AY32GRHNPMWL4LNMJLS3UYNEWI5QQVYVRUS75HD2CPKBFQPHOEJA',\n        'SM6VTVE4YFRJYK4ZZCZ7PIQMNZ4KXZD3KTHCWR54LGY2MPHMZTC2MP2KXM',\n        'DLDDVRVH47I3F6BQH63CXKQG7IBG7RWBX7HD3HITOTSZ4WRKLDXBOFYKUY',\n        'YEU3N6UI245NMW4JQYRUTCRUOV2YFJYDNGDLV7MVZOESHXI3KUXXN6Y3M4',\n        'TEX2UK4ZSFUVP4EMZPRFXER4SFDMDPDGU46K7A7IQPQ75ZIHMOV65MMMM4',\n        'UH2MRZ33XNVGMNG3YITPWQ4UPCZNWOEA2BUPHP6ANWXEMZLZRJKXQWJEO4',\n        'LOIUC53KK64GZXKLSD7KPFJBZ2WZVQHSIUFVWR4PKBEJ2CKBMCSJY4BOTM',\n        'DNJ5TR7TEB34I73VTS57OE7MEPLP3XJXZPWGQIPPUMEQAG5WZRQXFKVO4Q',\n        'RIC4VM2GX2TATLAFSMZIF7WQD56YNTCFYOTB26VFVCVJKXLPPPNEKUP4BY',\n        'MLFJDLAMRYWTKGHELCO3ETHPDAGBZNJBK27TGET4MNXTGZMYOMM4AMFBGQ',\n        'XQNWEAKIGYLGJUZEUVFLLKFOEIWLLN2Q4YLAENLBXGINVSEPTBPXCO6FLM',\n        'EKEGZMTE2WYAEJZG5CMEH5GOEWLLHAQL7MHL3HN7SVFI5FRO6X3TASTSUY'\n      ]\n\n    let asaInfos = asaArray.map((el, index) => {\n        return {\n            ...params,\n            fee: 1000,\n            flatFee: true,\n            type: 'acfg',\n            from: sender,\n            assetIndex: el,\n            assetFreeze: assetFreeze,\n            assetManager: assetManager,\n            assetReserve: assetReserve,\n            assetClawback:assetClawbackAddresses[index]\n          };\n    });\n    return asaInfos;\n} \n\nexport async function compileReplicantProgram(client){\n    const replicantSource=`#pragma version 4\n\n    int 0\n    txn ApplicationID\n    ==\n    bnz creation\n    \n    int UpdateApplication\n    txn OnCompletion\n    ==\n    bnz updateApp\n    \n    int DeleteApplication\n    txn OnCompletion\n    ==\n    bnz DeleteApp\n    \n    //=== Condition to freeze or unfreeze contract\n    txn ApplicationArgs 0\n    byte \"unfreeze_contract\"\n    ==\n    bnz unfreeze_contract\n    \n    txn ApplicationArgs 0\n    byte \"freeze_contract\"\n    ==\n    bnz freeze_contract\n    \n    \n    //Check if contract is frozen\n    byte \"contract_frozen\"\n    app_global_get\n    int 1\n    ==\n    bnz contract_frozen\n    \n    txn ApplicationArgs 0\n    byte \"set_price\"\n    ==\n    bnz set_price\n    \n    //======Condition to decide if an NFT should be sent to an artist for free=====\n    txn ApplicationArgs 0\n    byte \"sell_nft\"\n    ==\n    byte \"creator\"\n    app_global_get\n    gtxn 0 AssetSender\n    ==\n    &&\n    byte \"ap_edition\"\n    app_global_get\n    int 1\n    ==\n    &&\n    byte \"ap_artist\"\n    app_global_get\n    gtxn 0 AssetReceiver\n    ==\n    &&\n    byte \"tx_sent_to_artist\"\n    app_global_get\n    int 0\n    ==\n    &&\n    bnz send_tx_to_artist\n    \n    //=== Condition to check for secondary sale or primary sale\n    txn ApplicationArgs 0\n    byte \"sell_nft\"\n    ==\n    byte \"creator\"\n    app_global_get\n    gtxn 0 AssetSender\n    ==\n    &&\n    bnz primary_sale_txn\n    \n    txn ApplicationArgs 0\n    byte \"sell_nft\"\n    ==\n    byte \"creator\"\n    app_global_get\n    gtxn 0 AssetSender\n    !=\n    &&\n    bnz secondary_sale_txn\n    \n    \n    \n    \n    \n    \n    secondary_sale_txn:\n    global GroupSize\n    int 14\n    ==\n    gtxn  0 AssetAmount\n    int 1\n    ==\n    &&\n    byte \"asset_id\"\n    app_global_get\n    gtxn 0 XferAsset\n    ==\n    &&\n    byte \"price\"\n    app_global_get\n    int 0\n    !=\n    &&\n    gtxn 0 AssetSender\n    gtxn 2 Receiver\n    ==\n    &&\n    byte \"creator\"\n    app_global_get\n    gtxn 3 Receiver\n    ==\n    &&\n    byte \"Gordon\"\n    app_global_get\n    gtxn 4 Receiver\n    ==\n    &&\n    byte \"Galath3a\"\n    app_global_get\n    gtxn 5 Receiver\n    ==\n    &&\n    byte \"Hung\"\n    app_global_get\n    gtxn 6 Receiver\n    ==\n    &&\n    byte \"Keiken\"\n    app_global_get\n    gtxn 7 Receiver\n    ==\n    &&\n    byte \"Katja\"\n    app_global_get\n    gtxn 8 Receiver\n    ==\n    &&\n    byte \"Jennifer\"\n    app_global_get\n    gtxn 9 Receiver\n    ==\n    &&\n    byte \"Woo\"\n    app_global_get\n    gtxn 10 Receiver\n    ==\n    &&\n    byte \"Qianqian\"\n    app_global_get\n    gtxn 11 Receiver\n    ==\n    &&\n    byte \"Konrad\"\n    app_global_get\n    gtxn 12 Receiver\n    ==\n    &&\n    gtxn 2 Amount\n    gtxn 3 Amount\n    +\n    gtxn 4 Amount\n    +\n    gtxn 5 Amount\n    +\n    gtxn 6 Amount\n    +\n    gtxn 7 Amount\n    +\n    gtxn 8 Amount\n    +\n    gtxn 9 Amount\n    +\n    gtxn 10 Amount\n    +\n    gtxn 11 Amount\n    +\n    gtxn 12 Amount\n    +\n    gtxn 13 Amount\n    +\n    store 10\n    int 100000\n    store 11\n    int 2000\n    store 12\n    byte \"price\"\n    app_global_get\n    load 10\n    ==\n    &&\n    gtxn 2 Amount\n    load 11\n    *\n    load 10\n    /\n    int 79000\n    ==\n    &&\n    gtxn 3 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 4 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 5 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 6 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 7 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 8 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 9 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 10 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 11 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 12 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    gtxn 13 Amount\n    load 11\n    *\n    load 10\n    /\n    int 1000\n    ==\n    &&\n    //Save new owner\n    byte \"owner\"\n    gtxn 0 AssetReceiver\n    app_global_put\n    //Freeze contract\n    byte \"contract_frozen\"\n    int 1\n    app_global_put\n    return\n    \n    \n    \n    //== Primary Sale transaction\n    primary_sale_txn:\n    global GroupSize \n    int 12\n    ==\n    gtxn 0 AssetAmount\n    int 1\n    ==\n    &&\n    byte \"asset_id\"\n    app_global_get\n    gtxn 0 XferAsset\n    ==\n    &&\n    gtxn 2 Receiver\n    gtxn 0 AssetSender\n    ==\n    &&\n    byte \"creator\"\n    app_global_get\n    gtxn 2 Receiver\n    ==\n    &&\n    byte \"Gordon\"\n    app_global_get\n    gtxn 3 Receiver\n    ==\n    &&\n    byte \"Galath3a\"\n    app_global_get\n    gtxn 4 Receiver\n    ==\n    &&\n    byte \"Hung\"\n    app_global_get\n    gtxn 5 Receiver\n    ==\n    &&\n    byte \"Keiken\"\n    app_global_get\n    gtxn 6 Receiver\n    ==\n    &&\n    byte \"Katja\"\n    app_global_get\n    gtxn 7 Receiver\n    ==\n    &&\n    byte \"Jennifer\"\n    app_global_get\n    gtxn 8 Receiver\n    ==\n    &&\n    byte \"Woo\"\n    app_global_get\n    gtxn 9 Receiver\n    ==\n    &&\n    byte \"Qianqian\"\n    app_global_get\n    gtxn 10 Receiver\n    ==\n    &&\n    byte \"Konrad\"\n    app_global_get\n    gtxn 11 Receiver\n    ==\n    &&\n    gtxn 2 Amount\n    gtxn 3 Amount\n    +\n    gtxn 4 Amount\n    +\n    gtxn 5 Amount\n    +\n    gtxn 6 Amount\n    +\n    gtxn 7 Amount\n    +\n    gtxn 8 Amount\n    +\n    gtxn 9 Amount\n    +\n    gtxn 10 Amount\n    +\n    gtxn 11 Amount\n    +\n    store 10\n    int 100000\n    store 11\n    int 7777\n    store 12\n    load 10\n    int 2424000000\n    >=\n    &&\n    gtxn 2 Amount\n    load 11\n    *\n    load 10\n    /\n    int 30000\n    >=\n    &&\n    gtxn 3 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 4 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 5 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 6 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 7 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 8 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 9 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 10 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 11 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    //Save new owner\n    byte \"owner\"\n    gtxn 0 AssetReceiver\n    app_global_put\n    //Freeze contract\n    byte \"contract_frozen\"\n    int 1\n    app_global_put\n    return\n    \n    \n    \n    \n    \n    send_tx_to_artist:\n    byte \"tx_sent_to_artist\"\n    int 1\n    app_global_put\n    int 1\n    return\n    \n    \n    \n    \n    contract_frozen:\n    int 0\n    return\n    \n    unfreeze_contract:\n    byte \"contract_frozen\"\n    int 0\n    app_global_put\n    \n    byte \"owner\"\n    app_global_get\n    txn Sender\n    ==\n    return\n    \n    freeze_contract:\n    byte \"contract_frozen\"\n    int 1\n    app_global_put\n    \n    byte \"owner\"\n    app_global_get\n    txn Sender\n    ==\n    return\n    \n    \n    set_price:\n    byte \"price\"\n    txn ApplicationArgs 1\n    btoi\n    app_global_put\n    \n    byte \"owner\"\n    app_global_get\n    txn Sender\n    ==\n    return\n    \n    \n    creation:\n    // Save creator's address\n    byte \"creator\"\n    txn ApplicationArgs 0\n    app_global_put\n    //Save edition \n    byte \"edition\"\n    txn ApplicationArgs 1\n    btoi\n    app_global_put\n    //Save if it is an AP edition\n    byte \"ap_edition\"\n    txn ApplicationArgs 2\n    btoi\n    app_global_put\n    //Save asset info\n    byte \"asset_id\"\n    txn ApplicationArgs 3\n    btoi\n    app_global_put\n    //Save ap_artist\n    byte \"ap_artist\"\n    txn ApplicationArgs 4\n    app_global_put\n    //Save Epoch's address\n    byte \"epoch\"\n    txn ApplicationArgs 5\n    app_global_put\n    //Save Gordon's Address\n    byte \"Gordon\"\n    txn ApplicationArgs 6\n    app_global_put\n    //Save Galath3a's address\n    byte \"Galath3a\"\n    txn ApplicationArgs 7\n    app_global_put\n    //Save Hung's address\n    byte \"Hung\"\n    txn ApplicationArgs 8\n    app_global_put\n    //Save Keiken's address\n    byte \"Keiken\"\n    txn ApplicationArgs 9\n    app_global_put\n    //Save Katja's address\n    byte \"Katja\"\n    txn ApplicationArgs 10\n    app_global_put\n    //Save Jennifer's address\n    byte \"Jennifer\"\n    txn ApplicationArgs 11\n    app_global_put\n    //Save Woo's address\n    byte \"Woo\"\n    txn ApplicationArgs 12\n    app_global_put\n    //Save Qianqian's address\n    byte \"Qianqian\"\n    txn ApplicationArgs 13\n    app_global_put\n    //Save Konrad's address\n    byte \"Konrad\"\n    txn ApplicationArgs 14\n    app_global_put\n    //Save Price information\n    byte \"price\"\n    int 0\n    app_global_put\n    //Save boolean for if the artist has received his ap edition\n    byte \"tx_sent_to_artist\"\n    int 0\n    app_global_put\n    //Save boolean to freeze or unfreeze contract\n    byte \"contract_frozen\"\n    int 0\n    app_global_put\n    \n    byte \"owner\"\n    txn ApplicationArgs 0\n    app_global_put\n    \n    int 1\n    return\n    \n    \n    \n    updateApp:\n    byte \"creator\"\n    app_global_get\n    txn Sender\n    ==\n    return\n    \n    DeleteApp:\n    byte \"creator\"\n    app_global_get\n    txn Sender\n    ==\n    return\n    \n    `\n    return new Promise(async(resolve,reject)=>{\n        try{\n            const results = await client.compile(replicantSource).do();\n            resolve(results)\n        }catch(error){\n           reject(error) \n        }\n       \n    });\n}\n\n\nexport  async function compileClearProgram(client){\n    var clearProgramSource=`#pragma version 4\n    int 1`\n    return new Promise(async(resolve,reject)=>{\n        try{\n            const results = await client.compile(clearProgramSource).do();\n            resolve(results)\n        }catch(error){\n           reject(error) \n        }\n       \n    });\n}\n\nexport  function updateApplication(appId, approvalProgram,clearProgram,params,from){\n    return{\n        ...params,\n        fee:1000,\n        flatFee: true,\n        type: \"appl\",\n        from,\n      appIndex: appId,\n      appOnComplete: 4,\n      appApprovalProgram: approvalProgram,\n      appClearProgram: clearProgram,\n    }\n  }","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Buffer } from 'buffer';\n\n\nfunction ApSales(){\nlet neilBerloufa= [\"Neil Beloufa\",\"YGCKHAG4H3WDUQSAY5J4MK5ZIWLGIF7W6ZYO5EZY3OGZJB5FWGDNBX7BUA\"];\nlet sarahLosena=[\"Sarah Rosalena Brady\",\"IKEPBSW7RSPN4TXYC3AV6FOOGZ6PJLTJKEB2PVCTPSRFNB3CANZ5JJRZPY\"];\nlet aliceBucknell=[\"Alice Bucknell\",\"2FSBHE3XAXJHBFFUABPPBBU3ZL4PQAHI6BB3KTHJKL5IZCC7BG4LR6GRT4\"];\nlet juanCoveli=[\"Juan Covelli\",\"UONII5HLZPHGDCBCETVTFGX42I5MJWEYKM5NUIFQW3A47CSDIHZN74AYUA\"];\nlet alexandra=[\"Alexandra Koumantaki\",\"EMMEIOWLZPMUCXSLGB5QOR33HCQZAQT6KSRGCXHBO54W7LNLQCJXSGJ4IQ\"];\nlet amandaRoss=[\"Amanda Ross Ho\",\"UNH443RNFL4NWFCP5AI3N34C6IK6SWDEPZRLFKXGWYTXBZ5BTLJJLGWLRQ\"];\nlet hiradSab=[\"Hirad Sab\",\"QPNWTRS3FLRUICYYLVPQV7QZIJPBNM2EV6S5BF6JOFQL7DGCLU5HKQSUK4\"];\n\nlet epochClawedBackAddress = \"CZJCFCUDUL5GU5IIIADMA4XBDTJEG6JZG5MBYKBTP4NQCFTOT4PDSDN6QU\"\nlet epochBase64Address = \"AyADkE4GgtaLdTMAIDIDEjMBIDIDEhAzAiAyAxIQMwAJMgMSEDMBCTIDEhAzAgkyAxIQMwAVMgMSEDMBFTIDEhAzAhUyAxIQMQEiDhAzAhAjEhAzAhgkEhA=\";\n\nlet[P1Loading,setP1Loading] = useState(false);\nlet[P2Loading,setP2Loading] = useState(false);\nlet[P3Loading,setP3Loading] = useState(false);\nlet[P4Loading,setP4Loading] = useState(false);\nlet[P5Loading,setP5Loading] = useState(false);\nlet[P6Loading,setP6Loading] = useState(false);\nlet[P7Loading,setP7Loading] = useState(false);\n\nlet[D1Visible,setD1Visible] = useState(false);\nlet[D1Text,setD1Text] = useState(\"D1 Text\");\nlet[D1Title,setD1Title]= useState(\"D1 Title\");\nlet handleCloseD1=()=>{\n    setD1Visible(false)\n}\n\n\nlet[D2Visible,setD2Visible] = useState(false);\nlet[D2Text,setD2Text] = useState(\"D1 Text\");\nlet[D2Title,setD2Title]= useState(\"D1 Title\");\nlet handleCloseD2=()=>{\n    setD2Visible(false)\n}\n\n\nlet[D3Visible,setD3Visible] = useState(false);\nlet[D3Text,setD3Text] = useState(\"D1 Text\");\nlet[D3Title,setD3Title]= useState(\"D1 Title\");\nlet handleCloseD3=()=>{\n    setD3Visible(false)\n}\n\n\nlet[D4Visible,setD4Visible] = useState(false);\nlet[D4Text,setD4Text] = useState(\"D1 Text\");\nlet[D4Title,setD4Title]= useState(\"D1 Title\");\nlet handleCloseD4=()=>{\n    setD4Visible(false)\n}\n\n\nlet[D5Visible,setD5Visible] = useState(false);\nlet[D5Text,setD5Text] = useState(\"D1 Text\");\nlet[D5Title,setD5Title]= useState(\"D1 Title\");\nlet handleCloseD5=()=>{\n    setD5Visible(false)\n}\n\n\nlet[D6Visible,setD6Visible] = useState(false);\nlet[D6Text,setD6Text] = useState(\"D1 Text\");\nlet[D6Title,setD6Title]= useState(\"D1 Title\");\nlet handleCloseD6=()=>{\n    setD6Visible(false)\n}\n\nlet[D7Visible,setD7Visible] = useState(false);\nlet[D7Text,setD7Text] = useState(\"D1 Text\");\nlet[D7Title,setD7Title]= useState(\"D1 Title\");\nlet handleCloseD7=()=>{\n    setD7Visible(false)\n}\n\n\n\n\n\n\n\n\nlet program = new Uint8Array(Buffer.from(epochBase64Address,\"base64\"))\nconst lsig = algosdk.makeLogicSig(program);   \n// let [addresses, setAddresses] =useState([]);\nlet addresses =[];\nlet myalgoconnect = new MyAlgoConnect();\nlet assetIds = [245558023,245558024,245558025,245558026,245558027,245558028,245558029,245558030]\nlet applicationId = 245558018;\nconst token = { 'X-API-Key':'ADRySlL0NK5trzqZGAE3q1xxIqlQdSfk1nbHxTNe'};\nconst server = \"https://mainnet-algorand.api.purestake.io/ps2\";\nconst baseServer = \"https://mainnet-algorand.api.purestake.io/idx2\";\nconst port = '';\nconst client = new algosdk.Algodv2(token, server, port);\nlet indexerClient = new algosdk.Indexer(token, baseServer, port);\n\n    const classes = useStyles();\n    return(\n        <div className={classes.root}>\n            <Grid container spacing={3} >\n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                        <Dialog\n                            open={D1Visible}\n                            onClose={handleCloseD1}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{D1Title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{D1Text}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={handleCloseD1} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleCloseD1} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                    {P1Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                    <Typography className={classes.typohraphy}>Name: {neilBerloufa[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{neilBerloufa[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 1/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition1}>Send Epoch edition 1</Button>\n                    </div>\n                </Paper>\n                </Grid>\n            \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                <Dialog\n                            open={D2Visible}\n                            onClose={handleCloseD2}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{D2Title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{D2Text}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={handleCloseD2} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleCloseD2} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                    {P2Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                {P2Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name: {sarahLosena[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{sarahLosena[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 2/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition2}>Send Epoch edition 2</Button>\n                    </div>\n                </Paper>\n                </Grid>\n\n                \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                <Dialog\n                            open={D3Visible}\n                            onClose={handleCloseD3}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{D3Title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{D3Text}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={handleCloseD3} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleCloseD3} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                \n                {P3Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name: {aliceBucknell[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{aliceBucknell[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 3/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition3}>Send Epoch edition 3</Button>\n                    </div>\n                </Paper>\n                </Grid>\n               \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                    <Dialog\n                                open={D4Visible}\n                                onClose={handleCloseD4}\n                                aria-labelledby=\"alert-dialog-title\"\n                                aria-describedby=\"alert-dialog-description\">\n\n                                <DialogTitle id=\"alert-dialog-title\">{D4Title}</DialogTitle>\n                                <DialogContent>\n                                <DialogContentText id=\"alert-dialog-description\">{D4Text}</DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                <Button onClick={handleCloseD4} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button onClick={handleCloseD4} color=\"primary\" autoFocus>\n                                    Ok\n                                </Button>\n                                </DialogActions>\n                            </Dialog>\n\n\n                {P4Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                    <Typography className={classes.typohraphy}>Name: {juanCoveli[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{juanCoveli[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 4/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition4}>Send Epoch edition 4</Button>\n                    </div>\n                </Paper>\n                </Grid>\n            \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n\n                <Dialog\n                            open={D5Visible}\n                            onClose={handleCloseD5}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{D5Title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{D5Text}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={handleCloseD5} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleCloseD5} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                {P5Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name:{alexandra[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{alexandra[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 5/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\"  onClick={sendEdition5}>Send Epoch edition 5</Button>\n                    </div>\n                </Paper>\n                </Grid>\n\n                \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                <Dialog\n                                open={D6Visible}\n                                onClose={handleCloseD6}\n                                aria-labelledby=\"alert-dialog-title\"\n                                aria-describedby=\"alert-dialog-description\">\n\n                                <DialogTitle id=\"alert-dialog-title\">{D6Title}</DialogTitle>\n                                <DialogContent>\n                                <DialogContentText id=\"alert-dialog-description\">{D6Text}</DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                <Button onClick={handleCloseD6} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button onClick={handleCloseD6} color=\"primary\" autoFocus>\n                                    Ok\n                                </Button>\n                                </DialogActions>\n                            </Dialog>\n                {P6Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name: {amandaRoss[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography inline variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{amandaRoss[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 6/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\"  onClick={sendEdition6}>Send Epoch edition 6</Button>\n                    </div>\n                </Paper>\n                </Grid>\n\n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                <Dialog\n                                open={D7Visible}\n                                onClose={handleCloseD7}\n                                aria-labelledby=\"alert-dialog-title\"\n                                aria-describedby=\"alert-dialog-description\">\n\n                                <DialogTitle id=\"alert-dialog-title\">{D7Title}</DialogTitle>\n                                <DialogContent>\n                                <DialogContentText id=\"alert-dialog-description\">{D7Text}</DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                <Button onClick={handleCloseD7} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button onClick={handleCloseD7} color=\"primary\" autoFocus>\n                                    Ok\n                                </Button>\n                                </DialogActions>\n                            </Dialog>\n                {P7Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name: {hiradSab[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address:  </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}  style={{ wordWrap: \"break-word\",width:\"480px\" }}>{hiradSab[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 7/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition7}>Send Epoch edition 7</Button>\n                    </div>\n                </Paper>\n                </Grid>\n\n            </Grid>\n        </div>\n    );\n\n    async function connectToWallet(){\n        return new Promise(async(resolve,reject)=>{\n            let addresses;\n            try{\n                addresses = await myalgoconnect.connect();\n                resolve(addresses)\n            }catch(error){\n                reject(error);\n            }       \n        });\n     \n    }\n    async function isConnected(){\n        return new Promise(async(resolve,reject)=>{\n            if(addresses.length==0){\n                try{\n                   let addr =  await connectToWallet()\n                   addresses= addr;\n                   console.log(addr);\n                   resolve(true);\n                }catch(error){\n                 console.error(error);\n                  reject(false);    \n                } \n             }else{\n                  resolve(true);\n             }\n        })\n       \n    }\n\n    async function sendEdition1(){\n        setP1Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP1Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,neilBerloufa[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[0],addresses[0].address,neilBerloufa[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD1Title(\"An Error occurred\")\n        setD1Text(JSON.stringify(error));\n        setD1Visible(true);\n        setP1Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP1Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD1Title(\"Success\");\n            setD1Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD1Title(\"An Error occurred\")\n                setD1Text(JSON.stringify(error));\n                setD1Visible(true);\n                setP1Loading(false)\n                return;\n        }\n    }\n\n\n    async function sendEdition2(){\n        setP2Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP2Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,sarahLosena[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[1],addresses[0].address,sarahLosena[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD2Title(\"An Error occurred\")\n        setD2Text(JSON.stringify(error));\n        setD2Visible(true);\n        setP2Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP2Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD2Title(\"Success\");\n            setD2Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD2Title(\"An Error occurred\")\n                setD2Text(JSON.stringify(error));\n                setD2Visible(true);\n                setP2Loading(false);\n                return;\n        }\n\n    }\n\n\n    async function sendEdition3(){\n        setP3Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP3Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,aliceBucknell[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[2],addresses[0].address,aliceBucknell[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD3Title(\"An Error occurred\")\n        setD3Text(JSON.stringify(error));\n        setD3Visible(true);\n        setP3Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP3Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD3Title(\"Success\");\n            setD3Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD3Title(\"An Error occurred\")\n                setD3Text(JSON.stringify(error));\n                setD3Visible(true);\n                setP3Loading(false);\n                return;\n        }\n\n    }\n    async function sendEdition4(){\n        setP4Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP4Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,juanCoveli[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[3],addresses[0].address,juanCoveli[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD4Title(\"An Error occurred\")\n        setD4Text(JSON.stringify(error));\n        setD4Visible(true);\n        setP4Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP4Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD4Title(\"Success\");\n            setD4Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD4Title(\"An Error occurred\")\n                setD4Text(JSON.stringify(error));\n                setD4Visible(true);\n                setP4Loading(false);\n                return;\n        }\n\n\n    }\n    async function sendEdition5(){\n        setP5Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP5Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,alexandra[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[4],addresses[0].address,alexandra[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD5Title(\"An Error occurred\")\n        setD5Text(JSON.stringify(error));\n        setD5Visible(true);\n        setP5Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP5Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD5Title(\"Success\");\n            setD5Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD5Title(\"An Error occurred\")\n                setD5Text(JSON.stringify(error));\n                setD5Visible(true);\n                setP5Loading(false);\n                return;\n        }\n    }\n\n\n    async function sendEdition6(){\n        setP6Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP6Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,amandaRoss[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[5],addresses[0].address,amandaRoss[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD6Title(\"An Error occurred\")\n        setD6Text(JSON.stringify(error));\n        setD6Visible(true);\n        setP6Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP6Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD6Title(\"Success\");\n            setD6Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD6Title(\"An Error occurred\")\n                setD6Text(JSON.stringify(error));\n                setD6Visible(true);\n                setP6Loading(false);\n                return;\n        }\n    }\n\n\n\n\n\n    async function sendEdition7(){\n        setP7Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP7Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,hiradSab[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[6],addresses[0].address,hiradSab[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD7Title(\"An Error occurred\")\n        setD7Text(JSON.stringify(error));\n        setD7Visible(true);\n        setP7Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP7Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD7Title(\"Success\");\n            setD7Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD7Title(\"An Error occurred\")\n                setD7Text(JSON.stringify(error));\n                setD7Visible(true);\n                setP7Loading(false);\n                return;\n        }\n    }\n\n    function makeApplicationCallTransaction(sender,appId,appArgs,params){\n        let txn = {\n            type: \"appl\",\n            appOnComplete: 0,\n            from: sender,\n            appIndex: appId,\n            fee: 1000,\n            flatFee: true,\n            ...params\n    };\n        return txn;\n    }\n\n    function sendFunds(sender,receiver,amount,params){\n        let    txn = {\n              ...params,\n              fee: 1000,\n              flatFee: true,\n              type: 'pay',\n              from: sender,\n              to:  receiver,\n              amount: amount,\n              note: new Uint8Array(Buffer.from('“FREEPORT” – featuring Neïl Beloufa, Sarah Rosalena Brady, Alice Bucknell, Juan Covelli, Alexandra Koumantaki, Amanda Ross-Ho, Hirad Sab\", 2001'))\n      };\n       \n          return txn;\n      }\n\n      function sendAsset(assetID,revocationTarget,recipient, units,algodClient,params){   \n\n       let closeRemainderTo = undefined;\n        //Amount of the asset to transfer\n       let  amount = units;\n\n        // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\n        let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(epochClawedBackAddress, recipient, closeRemainderTo, revocationTarget,\n                amount,  new Uint8Array(Buffer.from(\"FREEPORT” – featuring Neïl Beloufa, Sarah Rosalena Brady, Alice Bucknell, Juan Covelli, Alexandra Koumantaki, Amanda Ross-Ho, Hirad Sab\")), assetID, params);\n        let program = new Uint8Array(Buffer.from(epochBase64Address,\"base64\"))\n        const lsig = algosdk.makeLogicSig(program);   \n       console.log(lsig.address());\n        // let rawSignedTxn = algosdk.signLogicSigTransactionObject(xtxn, lsig)\n        return xtxn;\n    }\n    \n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:300,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    }\n  }));\nexport default ApSales;\n","export default __webpack_public_path__ + \"static/media/replicantImage.f37982d2.jpeg\";","import React, { useState } from 'react';\nimport replicantImage from '../assets/images/replicantImage.jpeg'\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { useTheme } from '@material-ui/core/styles';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Buffer } from 'buffer';\nimport Home from './Home';\nimport {BrowserRouter as Router,Switch,Route, useHistory} from 'react-router-dom';\n\n\n\n\nfunction HomeScreen(){\n    const classes = useStyles();\n    let history = useHistory();\n    return( <div  className ={classes.root}>\n``              <Grid container spacing ={3}>\n                    {/* <Grid item xs = {4}>\n                        <Paper elevation = {3} className = {classes.paper}>\n                            <img src = {replicantImage} className = {classes.replicantImage}/>\n                            <h1 className ={classes.itemTitle}>Replicant Nft</h1>\n                            <Button variant =\"contained\" onClick = {moveToNftCreationScreen} color=\"primary\"  className = {classes.itemButton}>\n                                Create Replicant Nft \n                            </Button>\n                        </Paper>\n                    </Grid> */}\n                    <Grid item xs = {4}>\n                        <Paper elevation = {3} className = {classes.paper}>\n                            <img src = {replicantImage} className = {classes.replicantImage}/>\n                            <h1 className ={classes.itemTitle}>Replicant Nft</h1>\n                            <Button variant =\"contained\" onClick = {moveToNftManageScreen} color=\"primary\"  className = {classes.itemButton}>\n                                Manage Replicant Nft \n                            </Button>\n                        </Paper>\n                    </Grid>\n                </Grid>\n        </div>)\n\n    function moveToNftCreationScreen(){\n        history.push('/replicant-creation')\n    }\n\n    function moveToNftManageScreen(){\n        history.push('/replicant-manage')\n    }\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:340,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    },\n    replicantImage: {\n        width: '80%',\n        height: 'auto',\n        borderRadius:'5px',\n        marginTop: '0px',\n        border: '5px',\n        textAlign: 'center',\n        borderColor: '#ff0000',\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    itemTitle:{\n        borderColor: '#ff0000',\n        width:'80%',\n        fontSize: '16px',\n        marginTop: '8px',\n        textAlign: 'center',\n        color:theme.palette.primary.main,\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    itemButton:{\n        marginLeft:'auto',\n        marginRight:'auto'\n    }\n  }));\n\n  export default HomeScreen;","import React from 'react';\nimport HomeScreen from './HomeScreen';\nexport default function Home(){\n    return <div>\n                <HomeScreen>\n                    \n                </HomeScreen>\n            </div>\n}","import React, { useState } from 'react';\nimport replicantImage from '../assets/images/replicantImage.jpeg'\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { useTheme } from '@material-ui/core/styles';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport { Buffer } from 'buffer';\nimport Home from './Home';\nimport {createAsa,clawbackAsa,connectToWallet,isConnected,replicantAsaInfo,getAsaToClawbackInfo} from '../utils/utils';\n\n\nfunction ReplicantNftCreation(){\n    let signerAddress = []\n    let epochAddress = \"VTAUB5LOVTWKXICWEDBO5UG2JNNGEW7ULRB4PQB23DGRKSAXDVPORQNZJE\";\n    const token = { 'X-API-Key':'QIbtJ2qVvz8IUKIJiprmm2pRf2yutg14eOS98d15'};\n    const server = \"https://mainnet-algorand.api.purestake.io/ps2\";\n    const baseServer = \"https://mainnet-algorand.api.purestake.io/idx2\";\n    const port = '';\n    const client = new algosdk.Algodv2(token, server, port);\n    let indexerClient = new algosdk.Indexer(token, baseServer, port);\n    const classes = useStyles();\n    const [loading,setLoading] = useState(false);\n    const [dialogVisible, controlDialog] = useState(false);\n    const [dialogTitle, setDialogTitle] = useState(\"\");\n    const [dialogDescription, setDialogDescription] = useState(\"\")\n    return (<div className = {classes.root}>\n                <Grid container spacing = {2}>\n                    {/* <Paper elevation = {3}><CircularProgress color=\"primary\" className={classes.progress}/></Paper> */}\n                    <Grid item xs = {12}>\n                        <Paper elevation = {3} className = {classes.paper}>\n                            { loading? <CircularProgress color=\"secondary\" className={classes.progress}/>: null}\n                            <Dialog\n                            open={dialogVisible}\n                            onClose={() => controlDialog(false)}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{dialogTitle}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{dialogDescription}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={() => controlDialog(false)} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={() => controlDialog(false)} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                        <h1 className ={classes.itemTitle}>Create and Configure Replicant NFTS</h1>\n                            <img src = {replicantImage} className = {classes.replicantImage}/>\n                            <h1 className ={classes.itemTitle}>Kindly click on the respective buttons to create completely the Replicant Nfts</h1>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs = {6} className = {classes.centerGridItem}>\n                    <Button onClick = {create16OfReplicantNftsUsingWalletConnect} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Create 16 of the Replicant Nfts \n                    </Button>\n                    </Grid>\n                    <Grid item xs = {6}  className = {classes.centerGridItem}>\n                    <Button onClick = {create14OfReplicantNftsUsingWalletConnect} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Create the remaining 14 of the Replicant Nfts\n                    </Button>\n                    </Grid>\n                    \n\n                    <Grid item xs = {6} className = {classes.centerGridItem}>\n                    <Button onClick = {clawback16OfReplicantNftsUsingWalletConnect} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Clawback 16 of the Replicant Nfts\n                    </Button>\n                    </Grid>\n                    <Grid item xs = {6}  className = {classes.centerGridItem}>\n                    <Button onClick = {clawback14OfReplicantNftsUsingWalletConnect} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Clawback the remaining 14 of the Replicant Nfts\n                    </Button>\n                    </Grid>\n                </Grid>\n            </div>);\n\n\n    async function Create16OfReplicantNft(){\n\n    }\n\n   async function create16OfReplicantNFTsUsingMyAlgo(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params);\n        let txnsToSign = [];\n        replicantAsaInfo.map((el,index) => {\n            if(index < 16){\n                txnsToSign.push(createAsa(params, epochAddress, el.name, el.unit ,el.decimals, el.total, el.url, epochAddress, epochAddress, epochAddress, true, el.metadataHash, el.note))\n            }  \n        })\n       console.log(txnsToSign.length);\n       console.log(txnsToSign);\n\n       let groupId = algosdk.computeGroupID(txnsToSign);\n       txnsToSign = txnsToSign.map((el) => {\n                el.group=groupId;\n                return el;\n                });\n        let signedTxns = {};\n        try{\n            signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n        }catch(error){\n            console.error(\"Error ocurred \", error);\n            alert(error)\n            setLoading(false);\n        }\n        let blobs = signedTxns.map((el,index)=>{\n            return el.blob\n        });\n        console.log(blobs);\n       \n        let txTest={};\n        try{\n            txTest=(await client.sendRawTransaction(blobs).do());\n            console.log(txTest);\n            setLoading(false);\n            controlDialog(true);\n            setDialogTitle(\"Transaction Success\");\n            setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n          }catch(error){\n            console.error(\"Error ocurred \", error);\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n            return;\n            }     \n        \n    }\n    async function createRemaining14OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params);\n        let txnsToSign = [];\n        replicantAsaInfo.map((el,index) => {\n            if(index >= 16 && index < 30){\n                txnsToSign.push(createAsa(params, epochAddress, el.name, el.unit ,el.decimals, el.total, el.url, epochAddress, epochAddress, epochAddress, true, el.metadataHash, el.note))\n            }  \n        })\n       console.log(txnsToSign.length);\n       console.log(txnsToSign);\n\n       let groupId = algosdk.computeGroupID(txnsToSign);\n       txnsToSign = txnsToSign.map((el) => {\n                el.group=groupId;\n                return el;\n                });\n        let signedTxns = {};\n        try{\n            signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n        }catch(error){\n            console.error(\"Error ocurred \", error);\n            alert(error)\n            setLoading(false);\n        }\n        let blobs = signedTxns.map((el,index)=>{\n            return el.blob\n        })\n        console.log(blobs);\n       \n        let txTest={};\n        try{\n            txTest=(await client.sendRawTransaction(blobs).do());\n            console.log(txTest);\n            setLoading(false);\n            controlDialog(true);\n            setDialogTitle(\"Transaction Success\");\n            setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n          }catch(error){\n            console.error(\"Error ocurred \", error);\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n            return;\n            }    \n    }\n\n    async function clawback16OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let txnsToSign = getAsaToClawbackInfo(params,epochAddress,epochAddress,epochAddress,epochAddress,epochAddress).map((el,index) => {\n            if(index < 16){\n                return el;\n            }\n        });\n        console.log(txnsToSign.length);\n        console.log(txnsToSign);\n \n        let groupId = algosdk.computeGroupID(txnsToSign);\n        txnsToSign = txnsToSign.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         })\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }    \n\n    }\n   async function clawbackRemaining14OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let txnsToSign = getAsaToClawbackInfo(params,epochAddress,epochAddress,epochAddress,epochAddress,epochAddress).map((el,index) => {\n            if(index >= 16 && index < 30){\n                return el;\n            }\n        });\n        console.log(txnsToSign.length);\n        console.log(txnsToSign);\n \n        let groupId = algosdk.computeGroupID(txnsToSign);\n        txnsToSign = txnsToSign.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         })\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }    \n    }\n\n    async function create16OfReplicantNftsUsingWalletConnect(){\n        setLoading(true)\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                replicantAsaInfo.map((el,index) => {\n                    if(index < 16){\n                        txns.push(algosdk.makeAssetCreateTxnWithSuggestedParams(accounts[0], el.note,\n                            el.total, el.decimals, true, accounts[0], accounts[0], accounts[0],\n                            accounts[0], el.unit, el.name, el.url, el.metadataHash, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n              \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n\n    async function create14OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                replicantAsaInfo.map((el,index) => {\n                    if(index >= 16 && index < 30){\n                        txns.push(algosdk.makeAssetCreateTxnWithSuggestedParams(accounts[0], el.note,\n                            el.total, el.decimals, true, accounts[0], accounts[0], accounts[0],\n                            accounts[0], el.unit, el.name, el.url, el.metadataHash, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n    async function clawback14OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                getAsaToClawbackInfo(params,accounts[0],accounts[0],accounts[0],accounts[0],accounts[0]).map((el,index) => {\n                    if(index >= 16 && index < 30){\n                        txns.push(algosdk.makeAssetConfigTxnWithSuggestedParams(accounts[0], el.note, \n                            el.assetIndex, accounts[0], accounts[0], accounts[0], el.assetClawback, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n\n\n\n    async function clawback16OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                getAsaToClawbackInfo(params,accounts[0],accounts[0],accounts[0],accounts[0],accounts[0]).map((el,index) => {\n                    if(index < 16){\n                        txns.push(algosdk.makeAssetConfigTxnWithSuggestedParams(accounts[0], el.note, \n                            el.assetIndex, accounts[0], accounts[0], accounts[0], el.assetClawback, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n                // connector.killSession();\n              });\n              \n            //   connector.killSession();\n    }\n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:390,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    },\n    replicantImage: {\n        width: '80%',\n        height: '340px',\n        borderRadius:'5px',\n        marginTop: '0px',\n        border: '5px',\n        textAlign: 'center',\n        borderColor: '#ff0000',\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    itemTitle:{\n        borderColor: '#ff0000',\n        width:'80%',\n        fontSize: '16px',\n        marginTop: '8px',\n        textAlign: 'center',\n        color:theme.palette.primary.main,\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    centerGridItem:{\n        textAlign: 'center',\n    },\n    itemButton:{\n        marginLeft:'auto',\n        marginRight:'auto',\n        width:'60%'\n    }\n  }));\n\n\nexport default ReplicantNftCreation;\n\n\n\n","import React, { useState } from 'react';\nimport replicantImage from '../assets/images/replicantImage.jpeg'\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { useTheme } from '@material-ui/core/styles';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport { Buffer } from 'buffer';\nimport Home from './Home';\nimport {createAsa,clawbackAsa,connectToWallet,isConnected,replicantAsaInfo,getAsaToClawbackInfo, compileClearProgram, compileReplicantProgram, updateApplication} from '../utils/utils';\n\n\nfunction ReplicantNftCreation(){\n    let signerAddress = []\n    let epochAddress = \"VTAUB5LOVTWKXICWEDBO5UG2JNNGEW7ULRB4PQB23DGRKSAXDVPORQNZJE\";\n    const token = { 'X-API-Key':'QIbtJ2qVvz8IUKIJiprmm2pRf2yutg14eOS98d15'};\n    const server = \"https://mainnet-algorand.api.purestake.io/ps2\";\n    const baseServer = \"https://mainnet-algorand.api.purestake.io/idx2\";\n    const port = '';\n    const client = new algosdk.Algodv2(token, server, port);\n    let indexerClient = new algosdk.Indexer(token, baseServer, port);\n    const classes = useStyles();\n    const [loading,setLoading] = useState(false);\n    const [dialogVisible, controlDialog] = useState(false);\n    const [dialogTitle, setDialogTitle] = useState(\"\");\n    const [dialogDescription, setDialogDescription] = useState(\"\")\n    return (<div className = {classes.root}>\n                <Grid container spacing = {2}>\n                    {/* <Paper elevation = {3}><CircularProgress color=\"primary\" className={classes.progress}/></Paper> */}\n                    <Grid item xs = {12}>\n                        <Paper elevation = {3} className = {classes.paper}>\n                            { loading? <CircularProgress color=\"secondary\" className={classes.progress}/>: null}\n                            <Dialog\n                            open={dialogVisible}\n                            onClose={() => controlDialog(false)}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{dialogTitle}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{dialogDescription}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={() => controlDialog(false)} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={() => controlDialog(false)} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                        <h1 className ={classes.itemTitle}>Create and Configure Replicant NFTS</h1>\n                            <img src = {replicantImage} className = {classes.replicantImage}/>\n                            <h1 className ={classes.itemTitle}>Kindly click on the respective buttons to update the Replicant Nfts</h1>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs = {6} className = {classes.centerGridItem}>\n                    <Button onClick = {update16OfTheNft} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Update 16 of the Replicant Nfts \n                    </Button>\n                    </Grid>\n                    <Grid item xs = {6}  className = {classes.centerGridItem}>\n                    <Button onClick = {updateTheRemaining14OfTheNft} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Update the remaining 14 of the Replicant Nfts\n                    </Button>\n                    </Grid>\n                    \n                </Grid>\n            </div>);\n\n     async function update16OfTheNft(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let compiledApprovalProgram = await compileReplicantProgram(client);\n        let compiledClearProgram = await compileClearProgram(client);\n\n        console.log(compiledApprovalProgram);\n        console.log(compiledClearProgram)\n\n        let approvalProgram =  new Uint8Array(Buffer.from(compiledApprovalProgram.result,\"base64\"));\n        let clearProgram =  new Uint8Array(Buffer.from(compiledClearProgram.result,\"base64\"));\n\n        console.log(approvalProgram);\n        console.log(clearProgram);\n        let params = {};\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let appIds = [387031352, 387031353, 387031354, 387031355, 387031356, 387031357, 387031358, 387031359, 387031360, 387031361, 387031362, 387031363, 387031364, 387031365, 387031366, 387034557, 387034558, 387034559, 387034560, 387034561, 387034562, 387161797, 387166820, 387169663, 387171644, 387175171, 387176902, 387179258, 387181363, 387185953 ];\n        \n        let updateAppTxns =  [];\n        appIds.map((el, index) => {\n            if(index < 16){\n            let   updateAppTxn =   updateApplication(el, approvalProgram,clearProgram,params,epochAddress);\n            updateAppTxns.push(updateAppTxn);\n            }\n        })\n\n        console.log(updateAppTxns);\n        let groupId = algosdk.computeGroupID(updateAppTxns);\n        updateAppTxns = updateAppTxns.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(updateAppTxns);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         });\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }     \n         \n      \n     }\n\n     async function updateTheRemaining14OfTheNft(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let compiledApprovalProgram = await compileReplicantProgram(client);\n        let compiledClearProgram = await compileClearProgram(client);\n\n        console.log(compiledApprovalProgram);\n        console.log(compiledClearProgram)\n\n        let approvalProgram =  new Uint8Array(Buffer.from(compiledApprovalProgram.result,\"base64\"));\n        let clearProgram =  new Uint8Array(Buffer.from(compiledClearProgram.result,\"base64\"));\n\n        console.log(approvalProgram);\n        console.log(clearProgram);\n        let params = {};\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let appIds = [387031352, 387031353, 387031354, 387031355, 387031356, 387031357, 387031358, 387031359, 387031360, 387031361, 387031362, 387031363, 387031364, 387031365, 387031366, 387034557, 387034558, 387034559, 387034560, 387034561, 387034562, 387161797, 387166820, 387169663, 387171644, 387175171, 387176902, 387179258, 387181363, 387185953 ];\n        \n        let updateAppTxns =  [];\n        appIds.map((el, index) => {\n            if(index >= 16 && index < 30){\n            let   updateAppTxn =   updateApplication(el, approvalProgram,clearProgram,params,epochAddress);\n            updateAppTxns.push(updateAppTxn);\n            }\n        })\n\n        console.log(updateAppTxns);\n        let groupId = algosdk.computeGroupID(updateAppTxns);\n        updateAppTxns = updateAppTxns.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(updateAppTxns);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         });\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }     \n         \n      \n     }\n\n  \n    async function createRemaining14OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params);\n        let txnsToSign = [];\n        replicantAsaInfo.map((el,index) => {\n            if(index >= 16 && index < 30){\n                txnsToSign.push(createAsa(params, epochAddress, el.name, el.unit ,el.decimals, el.total, el.url, epochAddress, epochAddress, epochAddress, true, el.metadataHash, el.note))\n            }  \n        })\n       console.log(txnsToSign.length);\n       console.log(txnsToSign);\n\n       let groupId = algosdk.computeGroupID(txnsToSign);\n       txnsToSign = txnsToSign.map((el) => {\n                el.group=groupId;\n                return el;\n                });\n        let signedTxns = {};\n        try{\n            signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n        }catch(error){\n            console.error(\"Error ocurred \", error);\n            alert(error)\n            setLoading(false);\n        }\n        let blobs = signedTxns.map((el,index)=>{\n            return el.blob\n        })\n        console.log(blobs);\n       \n        let txTest={};\n        try{\n            txTest=(await client.sendRawTransaction(blobs).do());\n            console.log(txTest);\n            setLoading(false);\n            controlDialog(true);\n            setDialogTitle(\"Transaction Success\");\n            setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n          }catch(error){\n            console.error(\"Error ocurred \", error);\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n            return;\n            }    \n    }\n\n    async function clawback16OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let txnsToSign = getAsaToClawbackInfo(params,epochAddress,epochAddress,epochAddress,epochAddress,epochAddress).map((el,index) => {\n            if(index < 16){\n                return el;\n            }\n        });\n        console.log(txnsToSign.length);\n        console.log(txnsToSign);\n \n        let groupId = algosdk.computeGroupID(txnsToSign);\n        txnsToSign = txnsToSign.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         })\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }    \n\n    }\n   async function clawbackRemaining14OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let txnsToSign = getAsaToClawbackInfo(params,epochAddress,epochAddress,epochAddress,epochAddress,epochAddress).map((el,index) => {\n            if(index >= 16 && index < 30){\n                return el;\n            }\n        });\n        console.log(txnsToSign.length);\n        console.log(txnsToSign);\n \n        let groupId = algosdk.computeGroupID(txnsToSign);\n        txnsToSign = txnsToSign.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         })\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }    \n    }\n\n    async function create16OfReplicantNftsUsingWalletConnect(){\n        setLoading(true)\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                replicantAsaInfo.map((el,index) => {\n                    if(index < 16){\n                        txns.push(algosdk.makeAssetCreateTxnWithSuggestedParams(accounts[0], el.note,\n                            el.total, el.decimals, true, accounts[0], accounts[0], accounts[0],\n                            accounts[0], el.unit, el.name, el.url, el.metadataHash, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n              \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n\n    async function create14OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                replicantAsaInfo.map((el,index) => {\n                    if(index >= 16 && index < 30){\n                        txns.push(algosdk.makeAssetCreateTxnWithSuggestedParams(accounts[0], el.note,\n                            el.total, el.decimals, true, accounts[0], accounts[0], accounts[0],\n                            accounts[0], el.unit, el.name, el.url, el.metadataHash, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n    async function clawback14OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                getAsaToClawbackInfo(params,accounts[0],accounts[0],accounts[0],accounts[0],accounts[0]).map((el,index) => {\n                    if(index >= 16 && index < 30){\n                        txns.push(algosdk.makeAssetConfigTxnWithSuggestedParams(accounts[0], el.note, \n                            el.assetIndex, accounts[0], accounts[0], accounts[0], el.assetClawback, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n\n\n\n    async function clawback16OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                getAsaToClawbackInfo(params,accounts[0],accounts[0],accounts[0],accounts[0],accounts[0]).map((el,index) => {\n                    if(index < 16){\n                        txns.push(algosdk.makeAssetConfigTxnWithSuggestedParams(accounts[0], el.note, \n                            el.assetIndex, accounts[0], accounts[0], accounts[0], el.assetClawback, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n                // connector.killSession();\n              });\n              \n            //   connector.killSession();\n    }\n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:390,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    },\n    replicantImage: {\n        width: '80%',\n        height: '340px',\n        borderRadius:'5px',\n        marginTop: '0px',\n        border: '5px',\n        textAlign: 'center',\n        borderColor: '#ff0000',\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    itemTitle:{\n        borderColor: '#ff0000',\n        width:'80%',\n        fontSize: '16px',\n        marginTop: '8px',\n        textAlign: 'center',\n        color:theme.palette.primary.main,\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    centerGridItem:{\n        textAlign: 'center',\n    },\n    itemButton:{\n        marginLeft:'auto',\n        marginRight:'auto',\n        width:'60%'\n    }\n  }));\n\n\nexport default ReplicantNftCreation;\n\n\n\n","\nimport logo from './logo.svg';\nimport './App.css';\nimport React  from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button';\nimport Drawer from '@material-ui/core/Drawer';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport HomeIcon from '@material-ui/icons/Home';\nimport CartIcon from '@material-ui/icons/ShoppingCart';\nimport ApSales from './screens/ApSales';\nimport ReplicantNftCreation from './screens/ReplicantNftCreation';\nimport ManageReplicantNft from './screens/ManageReplicantNft';\nimport Home from './screens/Home';\n\nimport {BrowserRouter as Router,Switch,Route, useHistory} from 'react-router-dom';\n\nfunction App(props) {\n  const classes = useStyles();\n  let history = useHistory();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n  const [pageTitle, setPageTitle]= React.useState('Epoch Nfts');\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor)=>{\n    return(<div className={classes.list}\n            role = \"presentation\"\n            onClick={toggleDrawer(anchor,false)}\n            onKeyDown={toggleDrawer(anchor,false)}>\n              \n              <List>\n                  <ListItem button key = \"Epoch Home\"\n                    onClick={(event)=>{setPageTitle(\"Epoch Home\"); history.push(\"/\")}}>\n                    <ListItemIcon>\n                      <HomeIcon />\n                      <ListItemText primary={\"Epoch Home\"} />\n                    </ListItemIcon>\n                  </ListItem>\n                  <ListItem button key = \"Replicant AP Sales\"\n                  onClick={(event)=>{\n                    setPageTitle(\"Replicant AP Sales\"); \n                    history.push(\"/apsales\")\n                  }}>\n                  <ListItemIcon>\n                      <CartIcon />\n                      <ListItemText primary={\"Replicant AP Sales\"} />\n                    </ListItemIcon>\n                  </ListItem>\n              </List>\n           </div>)\n  }\n  \n\n  return (\n    \n      <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\"\n              onClick={(event)=>{setState({...state,left:true})}}>\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" className={classes.title}>\n                {pageTitle}\n              </Typography>\n              <Button color=\"inherit\">Login</Button>\n            </Toolbar>\n          </AppBar>\n          <Drawer anchor={\"left\"} open={state.left} onClose={toggleDrawer(\"left\", false)}>\n          {list(\"left\")}\n        </Drawer>\n    \n        <Switch>\n            <Route path = \"/replicant-creation\">\n             {() =>  {\n              setPageTitle('Replicant Nft Creation');\n           return (<ReplicantNftCreation/>)\n             }}\n            </Route>\n\n            <Route path = \"/replicant-manage\">\n             {() =>  {\n              setPageTitle('Manage Replicant Nft');\n           return (<ManageReplicantNft/>)\n             }}\n            </Route>\n\n            <Route path = \"/apsales\">\n              <ApSales/>\n            </Route>\n            <Route path = \"/\">\n              <Home/>\n            </Route>\n        </Switch>\n\n      </div>\n \n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n}));\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}