{"version":3,"sources":["logo.svg","screens/ApSales.js","assets/images/replicantImage.jpeg","assets/images/echoesImage.png","screens/HomeScreen.js","screens/Home.js","screens/ReplicantNftCreation.js","screens/ManageReplicantNft.js","screens/ManageEchoesNft.js","screens/ReplicantApSales.js","App.js","reportWebVitals.js","index.js","utils/utils.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginTop","marginLeft","marginRight","paper","padding","spacing","textAlign","color","palette","text","secondary","height","display","flexDirection","alignItems","position","typohraphy","fontSize","horDiv","justifyContent","buttonDiv","width","progress","top","left","ApSales","neilBerloufa","sarahLosena","aliceBucknell","juanCoveli","alexandra","amandaRoss","hiradSab","epochBase64Address","useState","P1Loading","setP1Loading","P2Loading","setP2Loading","P3Loading","setP3Loading","P4Loading","setP4Loading","P5Loading","setP5Loading","P6Loading","setP6Loading","P7Loading","setP7Loading","D1Visible","setD1Visible","D1Text","setD1Text","D1Title","setD1Title","handleCloseD1","D2Visible","setD2Visible","D2Text","setD2Text","D2Title","setD2Title","handleCloseD2","D3Visible","setD3Visible","D3Text","setD3Text","D3Title","setD3Title","handleCloseD3","D4Visible","setD4Visible","D4Text","setD4Text","D4Title","setD4Title","handleCloseD4","D5Visible","setD5Visible","D5Text","setD5Text","D5Title","setD5Title","handleCloseD5","D6Visible","setD6Visible","D6Text","setD6Text","D6Title","setD6Title","handleCloseD6","D7Visible","setD7Visible","D7Text","setD7Text","D7Title","setD7Title","handleCloseD7","program","Uint8Array","Buffer","from","lsig","algosdk","makeLogicSig","addresses","myalgoconnect","MyAlgoConnect","assetIds","applicationId","token","client","Algodv2","classes","Indexer","className","Grid","container","item","xs","Paper","elevation","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","autoFocus","CircularProgress","Typography","variant","style","wordWrap","inline","connectToWallet","a","Promise","resolve","reject","connect","isConnected","length","addr","console","log","error","getTransactionParams","do","params","appCallTxn","makeApplicationCallTransaction","address","zeroSendTxn","sendFunds","assetSendTxn","sendAsset","txns","groupId","computeGroupID","map","el","group","signedTxn0","signLogicSigTransaction","signedTxns","signTransaction","JSON","stringify","blobs","index","blob","signedTest","txTest","sendRawTransaction","txId","undefined","sender","appId","appArgs","type","appOnComplete","appIndex","fee","flatFee","receiver","amount","to","note","assetID","revocationTarget","recipient","units","algodClient","xtxn","makeAssetTransferTxnWithSuggestedParams","replicantImage","borderRadius","border","borderColor","itemTitle","primary","main","itemButton","HomeScreen","history","useHistory","src","push","Home","centerGridItem","ReplicantNftCreation","loading","setLoading","dialogVisible","controlDialog","dialogTitle","setDialogTitle","dialogDescription","setDialogDescription","connector","WalletConnect","bridge","qrcodeModal","QRCodeModal","connected","createSession","on","payload","accounts","replicantAsaInfo","makeAssetCreateTxnWithSuggestedParams","total","decimals","unit","name","url","metadataHash","txnsToSign","txn","encodeUnsignedTransaction","toString","message","requestParams","request","formatJsonRpcRequest","sendCustomRequest","result","decodedResult","element","killSession","getReplicantAsaToClawbackInfo","makeAssetConfigTxnWithSuggestedParams","assetIndex","assetClawback","signerAddress","epochAddress","compileReplicantProgram","compiledApprovalProgram","compileClearProgram","compiledClearProgram","approvalProgram","clearProgram","updateAppTxns","updateAppTxn","updateApplication","alert","echoesImage","EchoesNftManagement","asaS","asaClawbackAddresses","all","getAssetClawbackTxn","asaClawbackTxns","groupTxns","groupedAsaClawbackTxns","replicantApAssetIds","replicantArtistAddresses","sendEdition1","ArtistComp","assetId","replicantApAppIds","results","compileStatelessProgram","base64Hash","clawback","hash","artistAddress","TextEncoder","encode","epochClawedBackAddress","menuButton","title","list","fullList","App","props","anchor","React","bottom","right","state","setState","pageTitle","setPageTitle","toggleDrawer","event","key","account","setAccount","AppBar","Toolbar","IconButton","edge","Drawer","role","onKeyDown","List","ListItem","button","ListItemIcon","ListItemText","path","ManageReplicantNft","ManageEchoesNft","ReplicantApSales","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","createAsa","assetName","assetUnitName","assetDecimals","assetTotal","assetUrl","assetFreeze","assetManager","assetReserve","assetDefaultFrozen","assetMetadataHash","assetURL","assetClawbackAddresses","compile","statelessProgram","appApprovalProgram","appClearProgram","ctxn"],"mappings":"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","file":"static/js/main.732ea08c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Buffer } from 'buffer';\n\n\nfunction ApSales(){\nlet neilBerloufa= [\"Neil Beloufa\",\"YGCKHAG4H3WDUQSAY5J4MK5ZIWLGIF7W6ZYO5EZY3OGZJB5FWGDNBX7BUA\"];\nlet sarahLosena=[\"Sarah Rosalena Brady\",\"IKEPBSW7RSPN4TXYC3AV6FOOGZ6PJLTJKEB2PVCTPSRFNB3CANZ5JJRZPY\"];\nlet aliceBucknell=[\"Alice Bucknell\",\"2FSBHE3XAXJHBFFUABPPBBU3ZL4PQAHI6BB3KTHJKL5IZCC7BG4LR6GRT4\"];\nlet juanCoveli=[\"Juan Covelli\",\"UONII5HLZPHGDCBCETVTFGX42I5MJWEYKM5NUIFQW3A47CSDIHZN74AYUA\"];\nlet alexandra=[\"Alexandra Koumantaki\",\"EMMEIOWLZPMUCXSLGB5QOR33HCQZAQT6KSRGCXHBO54W7LNLQCJXSGJ4IQ\"];\nlet amandaRoss=[\"Amanda Ross Ho\",\"UNH443RNFL4NWFCP5AI3N34C6IK6SWDEPZRLFKXGWYTXBZ5BTLJJLGWLRQ\"];\nlet hiradSab=[\"Hirad Sab\",\"QPNWTRS3FLRUICYYLVPQV7QZIJPBNM2EV6S5BF6JOFQL7DGCLU5HKQSUK4\"];\n\nlet epochClawedBackAddress = \"CZJCFCUDUL5GU5IIIADMA4XBDTJEG6JZG5MBYKBTP4NQCFTOT4PDSDN6QU\"\nlet epochBase64Address = \"AyADkE4GgtaLdTMAIDIDEjMBIDIDEhAzAiAyAxIQMwAJMgMSEDMBCTIDEhAzAgkyAxIQMwAVMgMSEDMBFTIDEhAzAhUyAxIQMQEiDhAzAhAjEhAzAhgkEhA=\";\n\nlet[P1Loading,setP1Loading] = useState(false);\nlet[P2Loading,setP2Loading] = useState(false);\nlet[P3Loading,setP3Loading] = useState(false);\nlet[P4Loading,setP4Loading] = useState(false);\nlet[P5Loading,setP5Loading] = useState(false);\nlet[P6Loading,setP6Loading] = useState(false);\nlet[P7Loading,setP7Loading] = useState(false);\n\nlet[D1Visible,setD1Visible] = useState(false);\nlet[D1Text,setD1Text] = useState(\"D1 Text\");\nlet[D1Title,setD1Title]= useState(\"D1 Title\");\nlet handleCloseD1=()=>{\n    setD1Visible(false)\n}\n\n\nlet[D2Visible,setD2Visible] = useState(false);\nlet[D2Text,setD2Text] = useState(\"D1 Text\");\nlet[D2Title,setD2Title]= useState(\"D1 Title\");\nlet handleCloseD2=()=>{\n    setD2Visible(false)\n}\n\n\nlet[D3Visible,setD3Visible] = useState(false);\nlet[D3Text,setD3Text] = useState(\"D1 Text\");\nlet[D3Title,setD3Title]= useState(\"D1 Title\");\nlet handleCloseD3=()=>{\n    setD3Visible(false)\n}\n\n\nlet[D4Visible,setD4Visible] = useState(false);\nlet[D4Text,setD4Text] = useState(\"D1 Text\");\nlet[D4Title,setD4Title]= useState(\"D1 Title\");\nlet handleCloseD4=()=>{\n    setD4Visible(false)\n}\n\n\nlet[D5Visible,setD5Visible] = useState(false);\nlet[D5Text,setD5Text] = useState(\"D1 Text\");\nlet[D5Title,setD5Title]= useState(\"D1 Title\");\nlet handleCloseD5=()=>{\n    setD5Visible(false)\n}\n\n\nlet[D6Visible,setD6Visible] = useState(false);\nlet[D6Text,setD6Text] = useState(\"D1 Text\");\nlet[D6Title,setD6Title]= useState(\"D1 Title\");\nlet handleCloseD6=()=>{\n    setD6Visible(false)\n}\n\nlet[D7Visible,setD7Visible] = useState(false);\nlet[D7Text,setD7Text] = useState(\"D1 Text\");\nlet[D7Title,setD7Title]= useState(\"D1 Title\");\nlet handleCloseD7=()=>{\n    setD7Visible(false)\n}\n\n\n\n\n\n\n\n\nlet program = new Uint8Array(Buffer.from(epochBase64Address,\"base64\"))\nconst lsig = algosdk.makeLogicSig(program);   \n// let [addresses, setAddresses] =useState([]);\nlet addresses =[];\nlet myalgoconnect = new MyAlgoConnect();\nlet assetIds = [245558023,245558024,245558025,245558026,245558027,245558028,245558029,245558030]\nlet applicationId = 245558018;\nconst token = { 'X-API-Key':'ADRySlL0NK5trzqZGAE3q1xxIqlQdSfk1nbHxTNe'};\nconst server = \"https://mainnet-algorand.api.purestake.io/ps2\";\nconst baseServer = \"https://mainnet-algorand.api.purestake.io/idx2\";\nconst port = '';\nconst client = new algosdk.Algodv2(token, server, port);\nlet indexerClient = new algosdk.Indexer(token, baseServer, port);\n\n    const classes = useStyles();\n    return(\n        <div className={classes.root}>\n            <Grid container spacing={3} >\n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                        <Dialog\n                            open={D1Visible}\n                            onClose={handleCloseD1}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{D1Title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{D1Text}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={handleCloseD1} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleCloseD1} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                    {P1Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                    <Typography className={classes.typohraphy}>Name: {neilBerloufa[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{neilBerloufa[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 1/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition1}>Send Epoch edition 1</Button>\n                    </div>\n                </Paper>\n                </Grid>\n            \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                <Dialog\n                            open={D2Visible}\n                            onClose={handleCloseD2}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{D2Title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{D2Text}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={handleCloseD2} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleCloseD2} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                    {P2Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                {P2Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name: {sarahLosena[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{sarahLosena[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 2/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition2}>Send Epoch edition 2</Button>\n                    </div>\n                </Paper>\n                </Grid>\n\n                \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                <Dialog\n                            open={D3Visible}\n                            onClose={handleCloseD3}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{D3Title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{D3Text}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={handleCloseD3} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleCloseD3} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                \n                {P3Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name: {aliceBucknell[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{aliceBucknell[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 3/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition3}>Send Epoch edition 3</Button>\n                    </div>\n                </Paper>\n                </Grid>\n               \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                    <Dialog\n                                open={D4Visible}\n                                onClose={handleCloseD4}\n                                aria-labelledby=\"alert-dialog-title\"\n                                aria-describedby=\"alert-dialog-description\">\n\n                                <DialogTitle id=\"alert-dialog-title\">{D4Title}</DialogTitle>\n                                <DialogContent>\n                                <DialogContentText id=\"alert-dialog-description\">{D4Text}</DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                <Button onClick={handleCloseD4} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button onClick={handleCloseD4} color=\"primary\" autoFocus>\n                                    Ok\n                                </Button>\n                                </DialogActions>\n                            </Dialog>\n\n\n                {P4Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                    <Typography className={classes.typohraphy}>Name: {juanCoveli[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{juanCoveli[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 4/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition4}>Send Epoch edition 4</Button>\n                    </div>\n                </Paper>\n                </Grid>\n            \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n\n                <Dialog\n                            open={D5Visible}\n                            onClose={handleCloseD5}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{D5Title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{D5Text}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={handleCloseD5} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleCloseD5} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                {P5Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name:{alexandra[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{alexandra[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 5/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\"  onClick={sendEdition5}>Send Epoch edition 5</Button>\n                    </div>\n                </Paper>\n                </Grid>\n\n                \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                <Dialog\n                                open={D6Visible}\n                                onClose={handleCloseD6}\n                                aria-labelledby=\"alert-dialog-title\"\n                                aria-describedby=\"alert-dialog-description\">\n\n                                <DialogTitle id=\"alert-dialog-title\">{D6Title}</DialogTitle>\n                                <DialogContent>\n                                <DialogContentText id=\"alert-dialog-description\">{D6Text}</DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                <Button onClick={handleCloseD6} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button onClick={handleCloseD6} color=\"primary\" autoFocus>\n                                    Ok\n                                </Button>\n                                </DialogActions>\n                            </Dialog>\n                {P6Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name: {amandaRoss[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography inline variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{amandaRoss[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 6/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\"  onClick={sendEdition6}>Send Epoch edition 6</Button>\n                    </div>\n                </Paper>\n                </Grid>\n\n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                <Dialog\n                                open={D7Visible}\n                                onClose={handleCloseD7}\n                                aria-labelledby=\"alert-dialog-title\"\n                                aria-describedby=\"alert-dialog-description\">\n\n                                <DialogTitle id=\"alert-dialog-title\">{D7Title}</DialogTitle>\n                                <DialogContent>\n                                <DialogContentText id=\"alert-dialog-description\">{D7Text}</DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                <Button onClick={handleCloseD7} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button onClick={handleCloseD7} color=\"primary\" autoFocus>\n                                    Ok\n                                </Button>\n                                </DialogActions>\n                            </Dialog>\n                {P7Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name: {hiradSab[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address:  </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}  style={{ wordWrap: \"break-word\",width:\"480px\" }}>{hiradSab[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 7/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition7}>Send Epoch edition 7</Button>\n                    </div>\n                </Paper>\n                </Grid>\n\n            </Grid>\n        </div>\n    );\n\n    async function connectToWallet(){\n        return new Promise(async(resolve,reject)=>{\n            let addresses;\n            try{\n                addresses = await myalgoconnect.connect();\n                resolve(addresses)\n            }catch(error){\n                reject(error);\n            }       \n        });\n     \n    }\n    async function isConnected(){\n        return new Promise(async(resolve,reject)=>{\n            if(addresses.length==0){\n                try{\n                   let addr =  await connectToWallet()\n                   addresses= addr;\n                   console.log(addr);\n                   resolve(true);\n                }catch(error){\n                 console.error(error);\n                  reject(false);    \n                } \n             }else{\n                  resolve(true);\n             }\n        })\n       \n    }\n\n    async function sendEdition1(){\n        setP1Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP1Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,neilBerloufa[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[0],addresses[0].address,neilBerloufa[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD1Title(\"An Error occurred\")\n        setD1Text(JSON.stringify(error));\n        setD1Visible(true);\n        setP1Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP1Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD1Title(\"Success\");\n            setD1Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD1Title(\"An Error occurred\")\n                setD1Text(JSON.stringify(error));\n                setD1Visible(true);\n                setP1Loading(false)\n                return;\n        }\n    }\n\n\n    async function sendEdition2(){\n        setP2Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP2Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,sarahLosena[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[1],addresses[0].address,sarahLosena[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD2Title(\"An Error occurred\")\n        setD2Text(JSON.stringify(error));\n        setD2Visible(true);\n        setP2Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP2Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD2Title(\"Success\");\n            setD2Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD2Title(\"An Error occurred\")\n                setD2Text(JSON.stringify(error));\n                setD2Visible(true);\n                setP2Loading(false);\n                return;\n        }\n\n    }\n\n\n    async function sendEdition3(){\n        setP3Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP3Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,aliceBucknell[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[2],addresses[0].address,aliceBucknell[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD3Title(\"An Error occurred\")\n        setD3Text(JSON.stringify(error));\n        setD3Visible(true);\n        setP3Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP3Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD3Title(\"Success\");\n            setD3Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD3Title(\"An Error occurred\")\n                setD3Text(JSON.stringify(error));\n                setD3Visible(true);\n                setP3Loading(false);\n                return;\n        }\n\n    }\n    async function sendEdition4(){\n        setP4Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP4Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,juanCoveli[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[3],addresses[0].address,juanCoveli[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD4Title(\"An Error occurred\")\n        setD4Text(JSON.stringify(error));\n        setD4Visible(true);\n        setP4Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP4Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD4Title(\"Success\");\n            setD4Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD4Title(\"An Error occurred\")\n                setD4Text(JSON.stringify(error));\n                setD4Visible(true);\n                setP4Loading(false);\n                return;\n        }\n\n\n    }\n    async function sendEdition5(){\n        setP5Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP5Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,alexandra[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[4],addresses[0].address,alexandra[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD5Title(\"An Error occurred\")\n        setD5Text(JSON.stringify(error));\n        setD5Visible(true);\n        setP5Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP5Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD5Title(\"Success\");\n            setD5Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD5Title(\"An Error occurred\")\n                setD5Text(JSON.stringify(error));\n                setD5Visible(true);\n                setP5Loading(false);\n                return;\n        }\n    }\n\n\n    async function sendEdition6(){\n        setP6Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP6Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,amandaRoss[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[5],addresses[0].address,amandaRoss[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD6Title(\"An Error occurred\")\n        setD6Text(JSON.stringify(error));\n        setD6Visible(true);\n        setP6Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP6Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD6Title(\"Success\");\n            setD6Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD6Title(\"An Error occurred\")\n                setD6Text(JSON.stringify(error));\n                setD6Visible(true);\n                setP6Loading(false);\n                return;\n        }\n    }\n\n\n\n\n\n    async function sendEdition7(){\n        setP7Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP7Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,hiradSab[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[6],addresses[0].address,hiradSab[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD7Title(\"An Error occurred\")\n        setD7Text(JSON.stringify(error));\n        setD7Visible(true);\n        setP7Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP7Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD7Title(\"Success\");\n            setD7Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD7Title(\"An Error occurred\")\n                setD7Text(JSON.stringify(error));\n                setD7Visible(true);\n                setP7Loading(false);\n                return;\n        }\n    }\n\n    function makeApplicationCallTransaction(sender,appId,appArgs,params){\n        let txn = {\n            type: \"appl\",\n            appOnComplete: 0,\n            from: sender,\n            appIndex: appId,\n            fee: 1000,\n            flatFee: true,\n            ...params\n    };\n        return txn;\n    }\n\n    function sendFunds(sender,receiver,amount,params){\n        let    txn = {\n              ...params,\n              fee: 1000,\n              flatFee: true,\n              type: 'pay',\n              from: sender,\n              to:  receiver,\n              amount: amount,\n              note: new Uint8Array(Buffer.from('“FREEPORT” – featuring Neïl Beloufa, Sarah Rosalena Brady, Alice Bucknell, Juan Covelli, Alexandra Koumantaki, Amanda Ross-Ho, Hirad Sab\", 2001'))\n      };\n       \n          return txn;\n      }\n\n      function sendAsset(assetID,revocationTarget,recipient, units,algodClient,params){   \n\n       let closeRemainderTo = undefined;\n        //Amount of the asset to transfer\n       let  amount = units;\n\n        // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\n        let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(epochClawedBackAddress, recipient, closeRemainderTo, revocationTarget,\n                amount,  new Uint8Array(Buffer.from(\"FREEPORT” – featuring Neïl Beloufa, Sarah Rosalena Brady, Alice Bucknell, Juan Covelli, Alexandra Koumantaki, Amanda Ross-Ho, Hirad Sab\")), assetID, params);\n        let program = new Uint8Array(Buffer.from(epochBase64Address,\"base64\"))\n        const lsig = algosdk.makeLogicSig(program);   \n       console.log(lsig.address());\n        // let rawSignedTxn = algosdk.signLogicSigTransactionObject(xtxn, lsig)\n        return xtxn;\n    }\n    \n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:300,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    }\n  }));\nexport default ApSales;\n","export default __webpack_public_path__ + \"static/media/replicantImage.f37982d2.jpeg\";","export default __webpack_public_path__ + \"static/media/echoesImage.73d02ede.png\";","import React, { useState } from 'react';\nimport replicantImage from '../assets/images/replicantImage.jpeg'\nimport echoesImage from '../assets/images/echoesImage.png'\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { useTheme } from '@material-ui/core/styles';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Buffer } from 'buffer';\nimport Home from './Home';\nimport {BrowserRouter as Router,Switch,Route, useHistory} from 'react-router-dom';\n\n\n\n\nfunction HomeScreen(){\n    const classes = useStyles();\n    let history = useHistory();\n    return( <div  className ={classes.root}>\n``              <Grid container spacing ={3}>\n                    {/* <Grid item xs = {4}>\n                        <Paper elevation = {3} className = {classes.paper}>\n                            <img src = {replicantImage} className = {classes.replicantImage}/>\n                            <h1 className ={classes.itemTitle}>Replicant Nft</h1>\n                            <Button variant =\"contained\" onClick = {moveToReplicantNftCreationScreen} color=\"primary\"  className = {classes.itemButton}>\n                                Create Replicant Nft \n                            </Button>\n                        </Paper>\n                    </Grid> */}\n                    <Grid item xs = {4}>\n                        <Paper elevation = {3} className = {classes.paper}>\n                            <img src = {replicantImage} className = {classes.replicantImage}/>\n                            <h1 className ={classes.itemTitle}>Replicant Nft</h1>\n                            <Button variant =\"contained\" onClick = {moveToReplicantApSalesScreen} color=\"primary\"  className = {classes.itemButton}>\n                                 Replicant AP SALES \n                            </Button>\n                        </Paper>\n                    </Grid>\n                    {/* <Grid item xs = {4}>\n                        <Paper elevation = {3} className = {classes.paper}>\n                            <img src = {echoesImage} className = {classes.replicantImage}/>\n                            <h1 className ={classes.itemTitle}>Echoes Nft</h1>\n                            <Button variant =\"contained\" onClick = {moveToEchoesNftManageScreen} color=\"primary\"  className = {classes.itemButton}>\n                                Manage Echoes Nft \n                            </Button>\n                        </Paper>\n                    </Grid> */}\n                </Grid>\n        </div>)\n\n    function moveToReplicantNftCreationScreen(){\n        history.push('/replicant-creation')\n    }\n\n    function moveToReplicantNftManageScreen(){\n        history.push('/replicant-manage')\n    }\n    function moveToEchoesNftManageScreen(){\n        history.push('/manage-echoes')\n    }\n\n    function moveToReplicantApSalesScreen(){\n        history.push('/replicant-apsales');\n    }\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:340,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    },\n    replicantImage: {\n        width: '80%',\n        height: 'auto',\n        borderRadius:'5px',\n        marginTop: '0px',\n        border: '5px',\n        textAlign: 'center',\n        borderColor: '#ff0000',\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    itemTitle:{\n        borderColor: '#ff0000',\n        width:'80%',\n        fontSize: '16px',\n        marginTop: '8px',\n        textAlign: 'center',\n        color:theme.palette.primary.main,\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    itemButton:{\n        marginLeft:'auto',\n        marginRight:'auto'\n    }\n  }));\n\n  export default HomeScreen;","import React from 'react';\nimport HomeScreen from './HomeScreen';\nexport default function Home(){\n    return <div>\n                <HomeScreen>\n                    \n                </HomeScreen>\n            </div>\n}","import React, { useState } from 'react';\nimport replicantImage from '../assets/images/replicantImage.jpeg'\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { useTheme } from '@material-ui/core/styles';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport { Buffer } from 'buffer';\nimport Home from './Home';\nimport {createAsa,clawbackAsa,connectToWallet,isConnected,replicantAsaInfo,getReplicantAsaToClawbackInfo} from '../utils/utils';\n\n\nfunction ReplicantNftCreation(){\n    let signerAddress = []\n    let epochAddress = \"VTAUB5LOVTWKXICWEDBO5UG2JNNGEW7ULRB4PQB23DGRKSAXDVPORQNZJE\";\n    const token = { 'X-API-Key':'QIbtJ2qVvz8IUKIJiprmm2pRf2yutg14eOS98d15'};\n    const server = \"https://mainnet-algorand.api.purestake.io/ps2\";\n    const baseServer = \"https://mainnet-algorand.api.purestake.io/idx2\";\n    const port = '';\n    const client = new algosdk.Algodv2(token, server, port);\n    let indexerClient = new algosdk.Indexer(token, baseServer, port);\n    const classes = useStyles();\n    const [loading,setLoading] = useState(false);\n    const [dialogVisible, controlDialog] = useState(false);\n    const [dialogTitle, setDialogTitle] = useState(\"\");\n    const [dialogDescription, setDialogDescription] = useState(\"\")\n    return (<div className = {classes.root}>\n                <Grid container spacing = {2}>\n                    {/* <Paper elevation = {3}><CircularProgress color=\"primary\" className={classes.progress}/></Paper> */}\n                    <Grid item xs = {12}>\n                        <Paper elevation = {3} className = {classes.paper}>\n                            { loading? <CircularProgress color=\"secondary\" className={classes.progress}/>: null}\n                            <Dialog\n                            open={dialogVisible}\n                            onClose={() => controlDialog(false)}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{dialogTitle}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{dialogDescription}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={() => controlDialog(false)} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={() => controlDialog(false)} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                        <h1 className ={classes.itemTitle}>Create and Configure Replicant NFTS</h1>\n                            <img src = {replicantImage} className = {classes.replicantImage}/>\n                            <h1 className ={classes.itemTitle}>Kindly click on the respective buttons to create completely the Replicant Nfts</h1>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs = {6} className = {classes.centerGridItem}>\n                    <Button onClick = {create16OfReplicantNftsUsingWalletConnect} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Create 16 of the Replicant Nfts \n                    </Button>\n                    </Grid>\n                    <Grid item xs = {6}  className = {classes.centerGridItem}>\n                    <Button onClick = {create14OfReplicantNftsUsingWalletConnect} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Create the remaining 14 of the Replicant Nfts\n                    </Button>\n                    </Grid>\n                    \n\n                    <Grid item xs = {6} className = {classes.centerGridItem}>\n                    <Button onClick = {clawback16OfReplicantNftsUsingWalletConnect} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Clawback 16 of the Replicant Nfts\n                    </Button>\n                    </Grid>\n                    <Grid item xs = {6}  className = {classes.centerGridItem}>\n                    <Button onClick = {clawback14OfReplicantNftsUsingWalletConnect} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Clawback the remaining 14 of the Replicant Nfts\n                    </Button>\n                    </Grid>\n                </Grid>\n            </div>);\n\n\n    async function Create16OfReplicantNft(){\n\n    }\n\n   async function create16OfReplicantNFTsUsingMyAlgo(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params);\n        let txnsToSign = [];\n        replicantAsaInfo.map((el,index) => {\n            if(index < 16){\n                txnsToSign.push(createAsa(params, epochAddress, el.name, el.unit ,el.decimals, el.total, el.url, epochAddress, epochAddress, epochAddress, true, el.metadataHash, el.note))\n            }  \n        })\n       console.log(txnsToSign.length);\n       console.log(txnsToSign);\n\n       let groupId = algosdk.computeGroupID(txnsToSign);\n       txnsToSign = txnsToSign.map((el) => {\n                el.group=groupId;\n                return el;\n                });\n        let signedTxns = {};\n        try{\n            signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n        }catch(error){\n            console.error(\"Error ocurred \", error);\n            alert(error)\n            setLoading(false);\n        }\n        let blobs = signedTxns.map((el,index)=>{\n            return el.blob\n        });\n        console.log(blobs);\n       \n        let txTest={};\n        try{\n            txTest=(await client.sendRawTransaction(blobs).do());\n            console.log(txTest);\n            setLoading(false);\n            controlDialog(true);\n            setDialogTitle(\"Transaction Success\");\n            setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n          }catch(error){\n            console.error(\"Error ocurred \", error);\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n            return;\n            }     \n        \n    }\n    async function createRemaining14OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params);\n        let txnsToSign = [];\n        replicantAsaInfo.map((el,index) => {\n            if(index >= 16 && index < 30){\n                txnsToSign.push(createAsa(params, epochAddress, el.name, el.unit ,el.decimals, el.total, el.url, epochAddress, epochAddress, epochAddress, true, el.metadataHash, el.note))\n            }  \n        })\n       console.log(txnsToSign.length);\n       console.log(txnsToSign);\n\n       let groupId = algosdk.computeGroupID(txnsToSign);\n       txnsToSign = txnsToSign.map((el) => {\n                el.group=groupId;\n                return el;\n                });\n        let signedTxns = {};\n        try{\n            signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n        }catch(error){\n            console.error(\"Error ocurred \", error);\n            alert(error)\n            setLoading(false);\n        }\n        let blobs = signedTxns.map((el,index)=>{\n            return el.blob\n        })\n        console.log(blobs);\n       \n        let txTest={};\n        try{\n            txTest=(await client.sendRawTransaction(blobs).do());\n            console.log(txTest);\n            setLoading(false);\n            controlDialog(true);\n            setDialogTitle(\"Transaction Success\");\n            setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n          }catch(error){\n            console.error(\"Error ocurred \", error);\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n            return;\n            }    \n    }\n\n    async function clawback16OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let txnsToSign = getReplicantAsaToClawbackInfo(params,epochAddress,epochAddress,epochAddress,epochAddress,epochAddress).map((el,index) => {\n            if(index < 16){\n                return el;\n            }\n        });\n        console.log(txnsToSign.length);\n        console.log(txnsToSign);\n \n        let groupId = algosdk.computeGroupID(txnsToSign);\n        txnsToSign = txnsToSign.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         })\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }    \n\n    }\n   async function clawbackRemaining14OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let txnsToSign = getReplicantAsaToClawbackInfo(params,epochAddress,epochAddress,epochAddress,epochAddress,epochAddress).map((el,index) => {\n            if(index >= 16 && index < 30){\n                return el;\n            }\n        });\n        console.log(txnsToSign.length);\n        console.log(txnsToSign);\n \n        let groupId = algosdk.computeGroupID(txnsToSign);\n        txnsToSign = txnsToSign.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         })\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }    \n    }\n\n    async function create16OfReplicantNftsUsingWalletConnect(){\n        setLoading(true)\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                replicantAsaInfo.map((el,index) => {\n                    if(index < 16){\n                        txns.push(algosdk.makeAssetCreateTxnWithSuggestedParams(accounts[0], el.note,\n                            el.total, el.decimals, true, accounts[0], accounts[0], accounts[0],\n                            accounts[0], el.unit, el.name, el.url, el.metadataHash, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n              \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n\n    async function create14OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                replicantAsaInfo.map((el,index) => {\n                    if(index >= 16 && index < 30){\n                        txns.push(algosdk.makeAssetCreateTxnWithSuggestedParams(accounts[0], el.note,\n                            el.total, el.decimals, true, accounts[0], accounts[0], accounts[0],\n                            accounts[0], el.unit, el.name, el.url, el.metadataHash, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n    async function clawback14OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                getReplicantAsaToClawbackInfo(params,accounts[0],accounts[0],accounts[0],accounts[0],accounts[0]).map((el,index) => {\n                    if(index >= 16 && index < 30){\n                        txns.push(algosdk.makeAssetConfigTxnWithSuggestedParams(accounts[0], el.note, \n                            el.assetIndex, accounts[0], accounts[0], accounts[0], el.assetClawback, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n\n\n\n    async function clawback16OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                getReplicantAsaToClawbackInfo(params,accounts[0],accounts[0],accounts[0],accounts[0],accounts[0]).map((el,index) => {\n                    if(index < 16){\n                        txns.push(algosdk.makeAssetConfigTxnWithSuggestedParams(accounts[0], el.note, \n                            el.assetIndex, accounts[0], accounts[0], accounts[0], el.assetClawback, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n                // connector.killSession();\n              });\n              \n            //   connector.killSession();\n    }\n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:390,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    },\n    replicantImage: {\n        width: '80%',\n        height: '340px',\n        borderRadius:'5px',\n        marginTop: '0px',\n        border: '5px',\n        textAlign: 'center',\n        borderColor: '#ff0000',\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    itemTitle:{\n        borderColor: '#ff0000',\n        width:'80%',\n        fontSize: '16px',\n        marginTop: '8px',\n        textAlign: 'center',\n        color:theme.palette.primary.main,\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    centerGridItem:{\n        textAlign: 'center',\n    },\n    itemButton:{\n        marginLeft:'auto',\n        marginRight:'auto',\n        width:'60%'\n    }\n  }));\n\n\nexport default ReplicantNftCreation;\n\n\n\n","import React, { useState } from 'react';\nimport replicantImage from '../assets/images/replicantImage.jpeg'\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { useTheme } from '@material-ui/core/styles';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport { Buffer } from 'buffer';\nimport Home from './Home';\nimport {createAsa,clawbackAsa,connectToWallet,isConnected,replicantAsaInfo,getReplicantAsaToClawbackInfo, compileClearProgram, compileReplicantProgram, updateApplication} from '../utils/utils';\n\n\nfunction ReplicantNftCreation(){\n    let signerAddress = []\n    let epochAddress = \"VTAUB5LOVTWKXICWEDBO5UG2JNNGEW7ULRB4PQB23DGRKSAXDVPORQNZJE\";\n    const token = { 'X-API-Key':'QIbtJ2qVvz8IUKIJiprmm2pRf2yutg14eOS98d15'};\n    const server = \"https://mainnet-algorand.api.purestake.io/ps2\";\n    const baseServer = \"https://mainnet-algorand.api.purestake.io/idx2\";\n    const port = '';\n    const client = new algosdk.Algodv2(token, server, port);\n    let indexerClient = new algosdk.Indexer(token, baseServer, port);\n    const classes = useStyles();\n    const [loading,setLoading] = useState(false);\n    const [dialogVisible, controlDialog] = useState(false);\n    const [dialogTitle, setDialogTitle] = useState(\"\");\n    const [dialogDescription, setDialogDescription] = useState(\"\")\n    return (<div className = {classes.root}>\n                <Grid container spacing = {2}>\n                    {/* <Paper elevation = {3}><CircularProgress color=\"primary\" className={classes.progress}/></Paper> */}\n                    <Grid item xs = {12}>\n                        <Paper elevation = {3} className = {classes.paper}>\n                            { loading? <CircularProgress color=\"secondary\" className={classes.progress}/>: null}\n                            <Dialog\n                            open={dialogVisible}\n                            onClose={() => controlDialog(false)}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{dialogTitle}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{dialogDescription}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={() => controlDialog(false)} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={() => controlDialog(false)} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                        <h1 className ={classes.itemTitle}>Create and Configure Replicant NFTS</h1>\n                            <img src = {replicantImage} className = {classes.replicantImage}/>\n                            <h1 className ={classes.itemTitle}>Kindly click on the respective buttons to update the Replicant Nfts</h1>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs = {6} className = {classes.centerGridItem}>\n                    <Button onClick = {update16OfTheNft} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Update 16 of the Replicant Nfts \n                    </Button>\n                    </Grid>\n                    <Grid item xs = {6}  className = {classes.centerGridItem}>\n                    <Button onClick = {updateTheRemaining14OfTheNft} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Update the remaining 14 of the Replicant Nfts\n                    </Button>\n                    </Grid>\n                    \n                </Grid>\n            </div>);\n\n     async function update16OfTheNft(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let compiledApprovalProgram = await compileReplicantProgram(client);\n        let compiledClearProgram = await compileClearProgram(client);\n\n        console.log(compiledApprovalProgram);\n        console.log(compiledClearProgram)\n\n        let approvalProgram =  new Uint8Array(Buffer.from(compiledApprovalProgram.result,\"base64\"));\n        let clearProgram =  new Uint8Array(Buffer.from(compiledClearProgram.result,\"base64\"));\n\n        console.log(approvalProgram);\n        console.log(clearProgram);\n        let params = {};\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let appIds = [387031352, 387031353, 387031354, 387031355, 387031356, 387031357, 387031358, 387031359, 387031360, 387031361, 387031362, 387031363, 387031364, 387031365, 387031366, 387034557, 387034558, 387034559, 387034560, 387034561, 387034562, 387161797, 387166820, 387169663, 387171644, 387175171, 387176902, 387179258, 387181363, 387185953 ];\n        \n        let updateAppTxns =  [];\n        appIds.map((el, index) => {\n            if(index < 16){\n            let   updateAppTxn =   updateApplication(el, approvalProgram,clearProgram,params,epochAddress);\n            updateAppTxns.push(updateAppTxn);\n            }\n        })\n\n        console.log(updateAppTxns);\n        let groupId = algosdk.computeGroupID(updateAppTxns);\n        updateAppTxns = updateAppTxns.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(updateAppTxns);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         });\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }     \n         \n      \n     }\n\n     async function updateTheRemaining14OfTheNft(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let compiledApprovalProgram = await compileReplicantProgram(client);\n        let compiledClearProgram = await compileClearProgram(client);\n\n        console.log(compiledApprovalProgram);\n        console.log(compiledClearProgram)\n\n        let approvalProgram =  new Uint8Array(Buffer.from(compiledApprovalProgram.result,\"base64\"));\n        let clearProgram =  new Uint8Array(Buffer.from(compiledClearProgram.result,\"base64\"));\n\n        console.log(approvalProgram);\n        console.log(clearProgram);\n        let params = {};\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let appIds = [387031352, 387031353, 387031354, 387031355, 387031356, 387031357, 387031358, 387031359, 387031360, 387031361, 387031362, 387031363, 387031364, 387031365, 387031366, 387034557, 387034558, 387034559, 387034560, 387034561, 387034562, 387161797, 387166820, 387169663, 387171644, 387175171, 387176902, 387179258, 387181363, 387185953 ];\n        \n        let updateAppTxns =  [];\n        appIds.map((el, index) => {\n            if(index >= 16 && index < 30){\n            let   updateAppTxn =   updateApplication(el, approvalProgram,clearProgram,params,epochAddress);\n            updateAppTxns.push(updateAppTxn);\n            }\n        })\n\n        console.log(updateAppTxns);\n        let groupId = algosdk.computeGroupID(updateAppTxns);\n        updateAppTxns = updateAppTxns.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(updateAppTxns);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         });\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }     \n         \n      \n     }\n\n  \n    async function createRemaining14OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params);\n        let txnsToSign = [];\n        replicantAsaInfo.map((el,index) => {\n            if(index >= 16 && index < 30){\n                txnsToSign.push(createAsa(params, epochAddress, el.name, el.unit ,el.decimals, el.total, el.url, epochAddress, epochAddress, epochAddress, true, el.metadataHash, el.note))\n            }  \n        })\n       console.log(txnsToSign.length);\n       console.log(txnsToSign);\n\n       let groupId = algosdk.computeGroupID(txnsToSign);\n       txnsToSign = txnsToSign.map((el) => {\n                el.group=groupId;\n                return el;\n                });\n        let signedTxns = {};\n        try{\n            signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n        }catch(error){\n            console.error(\"Error ocurred \", error);\n            alert(error)\n            setLoading(false);\n        }\n        let blobs = signedTxns.map((el,index)=>{\n            return el.blob\n        })\n        console.log(blobs);\n       \n        let txTest={};\n        try{\n            txTest=(await client.sendRawTransaction(blobs).do());\n            console.log(txTest);\n            setLoading(false);\n            controlDialog(true);\n            setDialogTitle(\"Transaction Success\");\n            setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n          }catch(error){\n            console.error(\"Error ocurred \", error);\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n            return;\n            }    \n    }\n\n    async function clawback16OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let txnsToSign = getReplicantAsaToClawbackInfo(params,epochAddress,epochAddress,epochAddress,epochAddress,epochAddress).map((el,index) => {\n            if(index < 16){\n                return el;\n            }\n        });\n        console.log(txnsToSign.length);\n        console.log(txnsToSign);\n \n        let groupId = algosdk.computeGroupID(txnsToSign);\n        txnsToSign = txnsToSign.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         })\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }    \n\n    }\n   async function clawbackRemaining14OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let txnsToSign = getReplicantAsaToClawbackInfo(params,epochAddress,epochAddress,epochAddress,epochAddress,epochAddress).map((el,index) => {\n            if(index >= 16 && index < 30){\n                return el;\n            }\n        });\n        console.log(txnsToSign.length);\n        console.log(txnsToSign);\n \n        let groupId = algosdk.computeGroupID(txnsToSign);\n        txnsToSign = txnsToSign.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         })\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }    \n    }\n\n    async function create16OfReplicantNftsUsingWalletConnect(){\n        setLoading(true)\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                replicantAsaInfo.map((el,index) => {\n                    if(index < 16){\n                        txns.push(algosdk.makeAssetCreateTxnWithSuggestedParams(accounts[0], el.note,\n                            el.total, el.decimals, true, accounts[0], accounts[0], accounts[0],\n                            accounts[0], el.unit, el.name, el.url, el.metadataHash, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n              \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n\n    async function create14OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                replicantAsaInfo.map((el,index) => {\n                    if(index >= 16 && index < 30){\n                        txns.push(algosdk.makeAssetCreateTxnWithSuggestedParams(accounts[0], el.note,\n                            el.total, el.decimals, true, accounts[0], accounts[0], accounts[0],\n                            accounts[0], el.unit, el.name, el.url, el.metadataHash, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n    async function clawback14OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                getReplicantAsaToClawbackInfo(params,accounts[0],accounts[0],accounts[0],accounts[0],accounts[0]).map((el,index) => {\n                    if(index >= 16 && index < 30){\n                        txns.push(algosdk.makeAssetConfigTxnWithSuggestedParams(accounts[0], el.note, \n                            el.assetIndex, accounts[0], accounts[0], accounts[0], el.assetClawback, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n\n\n\n    async function clawback16OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                getReplicantAsaToClawbackInfo(params,accounts[0],accounts[0],accounts[0],accounts[0],accounts[0]).map((el,index) => {\n                    if(index < 16){\n                        txns.push(algosdk.makeAssetConfigTxnWithSuggestedParams(accounts[0], el.note, \n                            el.assetIndex, accounts[0], accounts[0], accounts[0], el.assetClawback, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n                // connector.killSession();\n              });\n              \n            //   connector.killSession();\n    }\n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:390,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    },\n    replicantImage: {\n        width: '80%',\n        height: '340px',\n        borderRadius:'5px',\n        marginTop: '0px',\n        border: '5px',\n        textAlign: 'center',\n        borderColor: '#ff0000',\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    itemTitle:{\n        borderColor: '#ff0000',\n        width:'80%',\n        fontSize: '16px',\n        marginTop: '8px',\n        textAlign: 'center',\n        color:theme.palette.primary.main,\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    centerGridItem:{\n        textAlign: 'center',\n    },\n    itemButton:{\n        marginLeft:'auto',\n        marginRight:'auto',\n        width:'60%'\n    }\n  }));\n\n\nexport default ReplicantNftCreation;\n\n\n\n","import React, { useState } from 'react';\nimport echoesImage from '../assets/images/echoesImage.png'\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { useTheme } from '@material-ui/core/styles';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport { Buffer } from 'buffer';\nimport Home from './Home';\nimport {createAsa,clawbackAsa,connectToWallet,isConnected,replicantAsaInfo,\n    getReplicantAsaToClawbackInfo, compileClearProgram,\n     compileReplicantProgram, updateApplication,  getAssetClawbackTxn, groupTxns} from '../utils/utils';\n\n\nfunction EchoesNftManagement({sender}){\n    let signerAddress = []\n    let epochAddress = \"VTAUB5LOVTWKXICWEDBO5UG2JNNGEW7ULRB4PQB23DGRKSAXDVPORQNZJE\";\n    const token = { 'X-API-Key':'QIbtJ2qVvz8IUKIJiprmm2pRf2yutg14eOS98d15'};\n    const server = \"https://mainnet-algorand.api.purestake.io/ps2\";\n    const baseServer = \"https://mainnet-algorand.api.purestake.io/idx2\";\n    const port = '';\n    const client = new algosdk.Algodv2(token, server, port);\n    let indexerClient = new algosdk.Indexer(token, baseServer, port);\n    const classes = useStyles();\n    const [loading,setLoading] = useState(false);\n    const [dialogVisible, controlDialog] = useState(false);\n    const [dialogTitle, setDialogTitle] = useState(\"\");\n    const [dialogDescription, setDialogDescription] = useState(\"\")\n    return (<div className = {classes.root}>\n                <Grid container spacing = {2}>\n                    {/* <Paper elevation = {3}><CircularProgress color=\"primary\" className={classes.progress}/></Paper> */}\n                    <Grid item xs = {12}>\n                        <Paper elevation = {3} className = {classes.paper}>\n                            { loading? <CircularProgress color=\"secondary\" className={classes.progress}/>: null}\n                            <Dialog\n                            open={dialogVisible}\n                            onClose={() => controlDialog(false)}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{dialogTitle}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{dialogDescription}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={() => controlDialog(false)} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={() => controlDialog(false)} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                        <h1 className ={classes.itemTitle}>Configure Echoes NFTS</h1>\n                            <img src = {echoesImage} className = {classes.echoesImage}/>\n                            <h1 className ={classes.itemTitle}>Kindly click on the respective buttons to update the Echoes Nfts</h1>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs = {12} className = {classes.centerGridItem}>\n                        <Grid item xs = {6} className = {classes.centerGridItem}>\n                        <Button onClick = {clawbackEchoesNft} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                                Clawback 13 of the Echoes Nfts \n                        </Button>\n                        </Grid>\n                    </Grid>\n                  \n                    {/* <Grid item xs = {6}  className = {classes.centerGridItem}>\n                    <Button onClick = {updateTheRemaining14OfTheNft} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Update the remaining 14 of the Echoes Nfts\n                    </Button>\n                    </Grid> */}\n                    \n                </Grid>\n            </div>);\n\n\n\n    async function clawbackEchoesNft(){\n        setLoading(true)\n        if(sender == null){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(\"Please click login to connect with official algorand wallet\");\n            setLoading(false);\n            return;\n        }\n        let asaS =  [603960750, 603964812, 603964911, 603964993, 603965069, 603965212, 603965306, 603965386, 603965457, 603965554, 603965592, 603965647, 603965731];\n        let asaClawbackAddresses = [\n            '6B5GMARG5IMHEOHJDIRSVXSIXWVZKZQJSWJ6CTBLOWO7LTRU7XM3UKSJVI',\n            'J55PGB7LIL5YDL7IYE4QISFYCNA6PWDZ5NHG5SFVIZWRRWJDSGJ2IUDGUU',\n            'HSDGAGY42JFEDED5X3K3EYQADWBPKCWWVJPSS6E2EOJ4SIQO4FAW3PYZFA',\n            'BZTQL3JTFBUJHMJT7H3AM2NOKLQTQQUF26JSDFAIIBAM4NRA7DHEHJPOMA',\n            'ZI27F67DV4GQKXDZSPPVVYRWBYRSB6MAYWU45PHZ2BKSSKUW7Z4HHRVECQ',\n            '4RWD6W7VCHTVNNKBNA2CT6JD7AVPW7WOYS5ZSIYTKOSA77GDB357BVZQNQ',\n            'JKEMVB7DTART3YCD72N4LUWAPLZKPVNVE23FL6IECELEKGOZJDJR7EHFBA',\n            'NQHXDGIBYOWCIACLPCUZC3LMJ2IS2USVOOD5X7FKZQE2KCDBAHZFKRIBD4',\n            'NDVANXXURFPJUMTIZUPTI5YRDF5DKBKTBZN3TEOO4QGZKCLD6JVWR7VBVE',\n            'EKGEPH64APPKUZXTK3YZTD2YASXXS3FAOUZTWXGJVHBF2XMD27SVNPSYAQ',\n            '4NYV76ENOYYMTS56LZP4VGRBM4MRVCSQCWLHK7HTT6TPB22TP7L6SLQV2U',\n            '7IEQNS64CA322EBKFLXLIGFSYR36I4UACROIZDM2L2ZCPV7BT7YUSTRBQM',\n            'ETSWA6ZNIEATOXQHEUUSFLVAO6556OSALZ7K7BALQ2GS7ZQ5KFAMSWECWI'\n          ]\n        let note = \"Clawback Transaction\"\n        let params = {};\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n            return;\n        } \n        let asaClawbackTxns = await Promise.all(asaClawbackAddresses.map(async (el, index) => {\n           return await getAssetClawbackTxn(sender, params, el, note, asaS[index], algosdk)\n        }));\n\n        let groupedAsaClawbackTxns = await  groupTxns(asaClawbackTxns, algosdk);\n\n        const txnsToSign = groupedAsaClawbackTxns.map(txn => {\n            const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n            return {\n              txn: encodedTxn,\n              message: 'Description of transaction being signed',\n            };\n          });\n          console.log(txnsToSign,\"txnsTosIGN\")\n          const requestParams = [txnsToSign];\n          console.log(requestParams);\n          const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n          console.log(request,\"request\");\n          const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n         const result = await connector.sendCustomRequest(request);\n          console.log(result,\"Result\");\n          const decodedResult = result.map(element => {\n            return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n          });\n\n        let txTest={};\n        try{\n            txTest=(await client.sendRawTransaction(decodedResult).do());\n            console.log(txTest);\n            setLoading(false);\n            controlDialog(true);\n            setDialogTitle(\"Transaction Success\");\n            setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n          }catch(error){\n            console.error(\"Error ocurred \", error);\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n            return;\n            }     \n    }\n\n     async function update16OfTheNft(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let compiledApprovalProgram = await compileReplicantProgram(client);\n        let compiledClearProgram = await compileClearProgram(client);\n\n        console.log(compiledApprovalProgram);\n        console.log(compiledClearProgram)\n\n        let approvalProgram =  new Uint8Array(Buffer.from(compiledApprovalProgram.result,\"base64\"));\n        let clearProgram =  new Uint8Array(Buffer.from(compiledClearProgram.result,\"base64\"));\n\n        console.log(approvalProgram);\n        console.log(clearProgram);\n        let params = {};\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let appIds = [387031352, 387031353, 387031354, 387031355, 387031356, 387031357, 387031358, 387031359, 387031360, 387031361, 387031362, 387031363, 387031364, 387031365, 387031366, 387034557, 387034558, 387034559, 387034560, 387034561, 387034562, 387161797, 387166820, 387169663, 387171644, 387175171, 387176902, 387179258, 387181363, 387185953 ];\n        \n        let updateAppTxns =  [];\n        appIds.map((el, index) => {\n            if(index < 16){\n            let   updateAppTxn =   updateApplication(el, approvalProgram,clearProgram,params,epochAddress);\n            updateAppTxns.push(updateAppTxn);\n            }\n        })\n\n        console.log(updateAppTxns);\n        let groupId = algosdk.computeGroupID(updateAppTxns);\n        updateAppTxns = updateAppTxns.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(updateAppTxns);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         });\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }     \n         \n      \n     }\n\n     async function updateTheRemaining14OfTheNft(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let compiledApprovalProgram = await compileReplicantProgram(client);\n        let compiledClearProgram = await compileClearProgram(client);\n\n        console.log(compiledApprovalProgram);\n        console.log(compiledClearProgram)\n\n        let approvalProgram =  new Uint8Array(Buffer.from(compiledApprovalProgram.result,\"base64\"));\n        let clearProgram =  new Uint8Array(Buffer.from(compiledClearProgram.result,\"base64\"));\n\n        console.log(approvalProgram);\n        console.log(clearProgram);\n        let params = {};\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let appIds = [387031352, 387031353, 387031354, 387031355, 387031356, 387031357, 387031358, 387031359, 387031360, 387031361, 387031362, 387031363, 387031364, 387031365, 387031366, 387034557, 387034558, 387034559, 387034560, 387034561, 387034562, 387161797, 387166820, 387169663, 387171644, 387175171, 387176902, 387179258, 387181363, 387185953 ];\n        \n        let updateAppTxns =  [];\n        appIds.map((el, index) => {\n            if(index >= 16 && index < 30){\n            let   updateAppTxn =   updateApplication(el, approvalProgram,clearProgram,params,epochAddress);\n            updateAppTxns.push(updateAppTxn);\n            }\n        })\n\n        console.log(updateAppTxns);\n        let groupId = algosdk.computeGroupID(updateAppTxns);\n        updateAppTxns = updateAppTxns.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(updateAppTxns);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         });\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }     \n         \n      \n     }\n\n  \n    async function createRemaining14OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params);\n        let txnsToSign = [];\n        replicantAsaInfo.map((el,index) => {\n            if(index >= 16 && index < 30){\n                txnsToSign.push(createAsa(params, epochAddress, el.name, el.unit ,el.decimals, el.total, el.url, epochAddress, epochAddress, epochAddress, true, el.metadataHash, el.note))\n            }  \n        })\n       console.log(txnsToSign.length);\n       console.log(txnsToSign);\n\n       let groupId = algosdk.computeGroupID(txnsToSign);\n       txnsToSign = txnsToSign.map((el) => {\n                el.group=groupId;\n                return el;\n                });\n        let signedTxns = {};\n        try{\n            signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n        }catch(error){\n            console.error(\"Error ocurred \", error);\n            alert(error)\n            setLoading(false);\n        }\n        let blobs = signedTxns.map((el,index)=>{\n            return el.blob\n        })\n        console.log(blobs);\n       \n        let txTest={};\n        try{\n            txTest=(await client.sendRawTransaction(blobs).do());\n            console.log(txTest);\n            setLoading(false);\n            controlDialog(true);\n            setDialogTitle(\"Transaction Success\");\n            setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n          }catch(error){\n            console.error(\"Error ocurred \", error);\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n            return;\n            }    \n    }\n\n    async function clawback16OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let txnsToSign = getReplicantAsaToClawbackInfo(params,epochAddress,epochAddress,epochAddress,epochAddress,epochAddress).map((el,index) => {\n            if(index < 16){\n                return el;\n            }\n        });\n        console.log(txnsToSign.length);\n        console.log(txnsToSign);\n \n        let groupId = algosdk.computeGroupID(txnsToSign);\n        txnsToSign = txnsToSign.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         })\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }    \n\n    }\n   async function clawbackRemaining14OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let txnsToSign = getReplicantAsaToClawbackInfo(params,epochAddress,epochAddress,epochAddress,epochAddress,epochAddress).map((el,index) => {\n            if(index >= 16 && index < 30){\n                return el;\n            }\n        });\n        console.log(txnsToSign.length);\n        console.log(txnsToSign);\n \n        let groupId = algosdk.computeGroupID(txnsToSign);\n        txnsToSign = txnsToSign.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         })\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }    \n    }\n\n    async function create16OfReplicantNftsUsingWalletConnect(){\n        setLoading(true)\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                replicantAsaInfo.map((el,index) => {\n                    if(index < 16){\n                        txns.push(algosdk.makeAssetCreateTxnWithSuggestedParams(accounts[0], el.note,\n                            el.total, el.decimals, true, accounts[0], accounts[0], accounts[0],\n                            accounts[0], el.unit, el.name, el.url, el.metadataHash, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n              \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n\n    async function create14OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                replicantAsaInfo.map((el,index) => {\n                    if(index >= 16 && index < 30){\n                        txns.push(algosdk.makeAssetCreateTxnWithSuggestedParams(accounts[0], el.note,\n                            el.total, el.decimals, true, accounts[0], accounts[0], accounts[0],\n                            accounts[0], el.unit, el.name, el.url, el.metadataHash, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n    async function clawback14OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                getReplicantAsaToClawbackInfo(params,accounts[0],accounts[0],accounts[0],accounts[0],accounts[0]).map((el,index) => {\n                    if(index >= 16 && index < 30){\n                        txns.push(algosdk.makeAssetConfigTxnWithSuggestedParams(accounts[0], el.note, \n                            el.assetIndex, accounts[0], accounts[0], accounts[0], el.assetClawback, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n\n\n\n    async function clawback16OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                getReplicantAsaToClawbackInfo(params,accounts[0],accounts[0],accounts[0],accounts[0],accounts[0]).map((el,index) => {\n                    if(index < 16){\n                        txns.push(algosdk.makeAssetConfigTxnWithSuggestedParams(accounts[0], el.note, \n                            el.assetIndex, accounts[0], accounts[0], accounts[0], el.assetClawback, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n                // connector.killSession();\n              });\n              \n            //   connector.killSession();\n    }\n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:390,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    },\n    echoesImage: {\n        width: '80%',\n        height: '340px',\n        borderRadius:'5px',\n        marginTop: '0px',\n        border: '5px',\n        textAlign: 'center',\n        borderColor: '#ff0000',\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    itemTitle:{\n        borderColor: '#ff0000',\n        width:'80%',\n        fontSize: '16px',\n        marginTop: '8px',\n        textAlign: 'center',\n        color:theme.palette.primary.main,\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    centerGridItem:{\n        textAlign: 'center',\n        marginLeft: \"auto\",\n        marginRight: \"auto\"\n    },\n    itemButton:{\n        marginLeft:'auto',\n        marginRight:'auto',\n        width:'60%'\n    }\n  }));\n\n\nexport default EchoesNftManagement;\n\n\n\n","import React, { useState } from 'react';\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Buffer } from 'buffer';\nimport {replicantApAppIds, replicantApAssetIds, replicantArtistAddresses, compileStatelessProgram} from '../utils/utils';\n\n\nfunction ApSales(){\n\n\n\n\n\n\n\n\n\n\n\n// let program = new Uint8Array(Buffer.from(epochBase64Address,\"base64\"))\n// const lsig = algosdk.makeLogicSig(program);   \n// let [addresses, setAddresses] =useState([]);\nlet addresses =[];\nlet myalgoconnect = new MyAlgoConnect();\nconst token = { 'X-API-Key':'ADRySlL0NK5trzqZGAE3q1xxIqlQdSfk1nbHxTNe'};\nconst server = \"https://mainnet-algorand.api.purestake.io/ps2\";\nconst baseServer = \"https://mainnet-algorand.api.purestake.io/idx2\";\nconst port = '';\nconst client = new algosdk.Algodv2(token, server, port);\nlet indexerClient = new algosdk.Indexer(token, baseServer, port);\n\n    const classes = useStyles();\n    return(\n        <div className={classes.root}>\n            <Grid container spacing={3} >\n           \n\n                {replicantApAssetIds.map((el, index) => ArtistComp(index))}\n            \n                \n            </Grid>\n        </div>\n    );\n\n    async function connectToWallet(){\n        return new Promise(async(resolve,reject)=>{\n            let addresses;\n            try{\n                addresses = await myalgoconnect.connect();\n                resolve(addresses)\n            }catch(error){\n                reject(error);\n            }       \n        });\n     \n    }\n    async function isConnected(){\n        return new Promise(async(resolve,reject)=>{\n            if(addresses.length==0){\n                try{\n                   let addr =  await connectToWallet()\n                   addresses= addr;\n                   console.log(addr);\n                   resolve(true);\n                }catch(error){\n                 console.error(error);\n                  reject(false);    \n                } \n             }else{\n                  resolve(true);\n             }\n        })\n       \n    }\n\n\n\n\n    async function sendEdition1(index, setP1Loading, setD1Visible, setD1Title, setD1Text){\n        setP1Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP1Loading(false);\n            return;\n        }\n        console.log(addresses);\n        const assetId = replicantApAssetIds[index];\n        const appId = replicantApAppIds[index];\n\n        let results = {};\n        try{\n            results = await compileStatelessProgram(client, assetId, appId);\n        }catch(e){\n            console.error(e);\n            setD1Title(\"An Error occurred\")\n            setD1Text(JSON.stringify(e));\n            setD1Visible(true);\n            setP1Loading(false)\n        }\n        \n    \n        const base64Hash = results.result;\n        const program = new Uint8Array(Buffer.from(base64Hash,\"base64\"))\n        const lsig = algosdk.makeLogicSig(program);   \n        const clawback = results.hash;\n        const artistAddress = replicantArtistAddresses[index].address\n        let params = {};\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(e){\n            console.error(e);\n        }\n        //TODO: change peter's address\n        let assetSendTxn = sendAsset(assetId,addresses[0].address,artistAddress,1,client,params,  clawback, base64Hash );\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,appId,[new TextEncoder().encode(\"sell_nft\")],params);\n\n        let txns = [assetSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n        txns = txns.map((el)=>{\n            el.group=groupId;\n            return el;\n        });\n        console.log(results);\n        let signedTxns = {};\n        try{\n            signedTxns =  await myalgoconnect.signTransaction([txns[1]]);\n        }catch(error){\n            console.error(\"Error ocurred \", error);\n            // alert(error)\n            setD1Title(\"An Error occurred\")\n            setD1Text(JSON.stringify(error));\n            setD1Visible(true);\n            setP1Loading(false)\n        }\n\n        let blobs = signedTxns.map((el,index)=>{\n            return el.blob\n        });\n        let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig);\n        let signedTest = [signedTxn0.blob,...blobs];\n        console.log(signedTest)\n        let txTest={};\n        try{\n            txTest=(await client.sendRawTransaction(signedTest).do());\n            setP1Loading(false);\n            if(txTest.txId!=null&&txTest.txId!=undefined){\n                setD1Title(\"Success\");\n                setD1Text(`Transaction id: ${txTest.txId}`);\n            }\n        }catch(error){\n            console.error(\"Error ocurred \", error);\n                    // alert(error)\n                    setD1Title(\"An Error occurred\")\n                    setD1Text(JSON.stringify(error));\n                    setD1Visible(true);\n                    setP1Loading(false)\n                    return;\n            }\n\n\n\n\n        //     setP1Loading(true);\n        //     let boolVal = await isConnected();\n        //     if(!boolVal){\n        //         setP1Loading(false);\n        //         return;\n        //     }\n        //     console.log(addresses);\n        \n        //     let params = await client.getTransactionParams().do();\n        //     let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params, \"clawback adddr\", \"epoc\");\n        //     let zeroSendTxn = sendFunds(addresses[0].address,neilBerloufa[1],0,params);\n        //     let assetSendTxn = sendAsset(assetIds[0],addresses[0].address,neilBerloufa[1],1,client,params);\n\n        //     console.log(appCallTxn);\n        //     console.log(zeroSendTxn);\n        //     console.log(assetSendTxn);\n\n        //     let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        //     let groupId = algosdk.computeGroupID(txns);\n        //             txns = txns.map((el)=>{\n        //             el.group=groupId;\n        //             return el;\n        //             });\n\n        // let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n        // let signedTxns ={};\n        // try{\n        //     signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n        // }catch(error){\n        //     console.error(\"Error ocurred \", error);\n        //     // alert(error)\n        //     setD1Title(\"An Error occurred\")\n        //     setD1Text(JSON.stringify(error));\n        //     setD1Visible(true);\n        //     setP1Loading(false)\n        // }\n    \n        // let blobs = signedTxns.map((el,index)=>{\n        //     return el.blob\n        // })\n\n        // let signedTest = [signedTxn0.blob,...blobs];\n        // console.log(signedTest)\n        // let txTest={};\n        // try{\n        //     txTest=(await client.sendRawTransaction(signedTest).do());\n        //     setP1Loading(false);\n        //     if(txTest.txId!=null&&txTest.txId!=undefined){\n        //         setD1Title(\"Success\");\n        //         setD1Text(`Transaction id: ${txTest.txId}`);\n        //     }\n        //   }catch(error){\n        //     console.error(\"Error ocurred \", error);\n        //             // alert(error)\n        //             setD1Title(\"An Error occurred\")\n        //             setD1Text(JSON.stringify(error));\n        //             setD1Visible(true);\n        //             setP1Loading(false)\n        //             return;\n        //     }\n    }\n\n\n    function ArtistComp(index){\n        let[P1Loading,setP1Loading] = useState(false);\n        let[D1Visible,setD1Visible] = useState(false);\n        let[D1Text,setD1Text] = useState(\"D1 Text\");\n        let[D1Title,setD1Title]= useState(\"D1 Title\");\nlet handleCloseD1=()=>{\n    setD1Visible(false)\n}\n        return (\n        <Grid item xs ={4}>\n    <Paper  elevation={3} className={classes.paper}>\n    <Dialog\n                open={D1Visible}\n                onClose={handleCloseD1}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\">\n\n                <DialogTitle id=\"alert-dialog-title\">{D1Title}</DialogTitle>\n                <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">{D1Text}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                <Button onClick={handleCloseD1} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button onClick={handleCloseD1} color=\"primary\" autoFocus>\n                    Ok\n                </Button>\n                </DialogActions>\n            </Dialog>\n\n        {P1Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n    {P1Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n    <Typography className={classes.typohraphy}>Name: {replicantArtistAddresses[index].name} </Typography>\n        <div className={classes.horDiv}>\n        <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n        <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{replicantArtistAddresses[index].address}</Typography>\n        </div>\n        <Typography className={classes.typohraphy}>Edition: Epoch Replicants Ap {`${index + 1}/${replicantApAssetIds.length}`}</Typography>\n\n        {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n        <div className={classes.buttonDiv}>\n            <Button variant =\"contained\" color = \"primary\" onClick={() => {sendEdition1(index, setP1Loading, setD1Visible, setD1Title, setD1Text)}}>Send Replicant Ap edition {index + 1}</Button>\n        </div>\n    </Paper>\n    </Grid>\n\n    )\n    }\n\n    function makeApplicationCallTransaction(sender,appId,appArgs,params){\n        let txn = {\n            type: \"appl\",\n            appOnComplete: 0,\n            from: sender,\n            appIndex: appId,\n            fee: 1000,\n            flatFee: true,\n            ...params\n    };\n        return txn;\n    }\n\n    function sendFunds(sender,receiver,amount,params){\n        let    txn = {\n              ...params,\n              fee: 1000,\n              flatFee: true,\n              type: 'pay',\n              from: sender,\n              to:  receiver,\n              amount: amount,\n              note: new Uint8Array(Buffer.from('“FREEPORT” – featuring Neïl Beloufa, Sarah Rosalena Brady, Alice Bucknell, Juan Covelli, Alexandra Koumantaki, Amanda Ross-Ho, Hirad Sab\", 2001'))\n      };\n       \n          return txn;\n      }\n\n      function sendAsset(assetID,revocationTarget,recipient, units,algodClient,params, epochClawedBackAddress, epochBase64Address){   \n\n       let closeRemainderTo = undefined;\n        //Amount of the asset to transfer\n       let  amount = units;\n\n        // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\n        let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(epochClawedBackAddress, recipient, closeRemainderTo, revocationTarget,\n                amount,  new Uint8Array(Buffer.from(\"FREEPORT” – featuring Neïl Beloufa, Sarah Rosalena Brady, Alice Bucknell, Juan Covelli, Alexandra Koumantaki, Amanda Ross-Ho, Hirad Sab\")), assetID, params);\n        let program = new Uint8Array(Buffer.from(epochBase64Address,\"base64\"))\n        const lsig = algosdk.makeLogicSig(program);   \n       console.log(lsig.address());\n        // let rawSignedTxn = algosdk.signLogicSigTransactionObject(xtxn, lsig)\n        return xtxn;\n    }\n    \n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:300,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    }\n  }));\nexport default ApSales;\n","\nimport logo from './logo.svg';\nimport './App.css';\nimport React  from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button';\nimport Drawer from '@material-ui/core/Drawer';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport HomeIcon from '@material-ui/icons/Home';\nimport CartIcon from '@material-ui/icons/ShoppingCart';\nimport ApSales from './screens/ApSales';\nimport ReplicantNftCreation from './screens/ReplicantNftCreation';\nimport ManageReplicantNft from './screens/ManageReplicantNft';\nimport ManageEchoesNft from './screens/ManageEchoesNft';\nimport Home from './screens/Home';\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport {BrowserRouter as Router,Switch,Route, useHistory} from 'react-router-dom';\nimport ReplicantApSales from './screens/ReplicantApSales';\n\nfunction App(props) {\n\n  const classes = useStyles();\n  let history = useHistory();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n \n  const [pageTitle, setPageTitle]= React.useState('Epoch Nfts');\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    setState({ ...state, [anchor]: open });\n  };\n  let connector = new WalletConnect({\n    bridge: \"https://bridge.walletconnect.org\", // Required\n    qrcodeModal: QRCodeModal,\n  });\n  const [account, setAccount] = React.useState( connector.connected ? connector.accounts[0]: null);\n\n  const list = (anchor)=>{\n    return(<div className={classes.list}\n            role = \"presentation\"\n            onClick={toggleDrawer(anchor,false)}\n            onKeyDown={toggleDrawer(anchor,false)}>\n              \n              <List>\n                  <ListItem button key = \"Epoch Home\"\n                    onClick={(event)=>{setPageTitle(\"Epoch Home\"); history.push(\"/\")}}>\n                    <ListItemIcon>\n                      <HomeIcon />\n                      <ListItemText primary={\"Epoch Home\"} />\n                    </ListItemIcon>\n                  </ListItem>\n                  <ListItem button key = \"Replicant AP Sales\"\n                  onClick={(event)=>{\n                    setPageTitle(\"Replicant AP Sales\"); \n                    history.push(\"/apsales\")\n                  }}>\n                  <ListItemIcon>\n                      <CartIcon />\n                      <ListItemText primary={\"Replicant AP Sales\"} />\n                    </ListItemIcon>\n                  </ListItem>\n              </List>\n           </div>)\n  }\n  \n\n  return (\n    \n      <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\"\n              onClick={(event)=>{setState({...state,left:true})}}>\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" className={classes.title}>\n                {pageTitle}\n              </Typography>\n              <Button onClick = {() => {\n                    \n                connector = new WalletConnect({\n                  bridge: \"https://bridge.walletconnect.org\", // Required\n                  qrcodeModal: QRCodeModal,\n                });\n                   \n                 if( account != null){\n                      connector.killSession();\n                      setAccount(null);\n                      return;\n                  }\n                  console.log(connector);\n                  // connector.killSession();\n                  // Check if connection is already established\n                    if (!connector.connected) {\n                        console.log(\"not connected\");\n                        // create new session\n                        connector.createSession();\n                    }\n                    if(connector.connected){\n                      console.log(\"connector is connected\");\n                      setAccount(connector.accounts[0]);\n                    }\n                    connector.on('connect', (error, payload) => {\n                      console.log(payload.params[0].accounts[0]);\n                      setAccount(payload.params[0].accounts[0])\n                    });\n\n                    connector.on(\"session_update\", (error, payload) => {\n                      if (error) {\n                        throw error;\n                      }\n                    console.log(\"session_update\");\n                      // Get updated accounts \n                      const { accounts } = payload.params[0];\n                      setAccount(payload.params[0].accounts[0])\n                    });\n                    \n                    connector.on(\"disconnect\", (error, payload) => {\n                      console.log(\"Disconnected\");\n                      if (error) {\n                        throw error;\n                      } });\n              }} color=\"inherit\"> { account == null ? 'Connect': \"Disconnect\" }</Button>\n            </Toolbar>\n          </AppBar>\n          <Drawer anchor={\"left\"} open={state.left} onClose={toggleDrawer(\"left\", false)}>\n          {list(\"left\")}\n        </Drawer>\n    \n        <Switch>\n            <Route path = \"/replicant-creation\">\n             {() =>  {\n              setPageTitle('Replicant Nft Creation');\n           return (<ReplicantNftCreation/>)\n             }}\n            </Route>\n\n            <Route path = \"/replicant-manage\">\n             {() =>  {\n              setPageTitle('Manage Replicant Nft');\n           return (<ManageReplicantNft/>)\n             }}\n            </Route>\n\n            <Route path = \"/apsales\">\n              <ApSales/>\n            </Route>\n            \n            <Route path=\"/manage-echoes\">\n              <ManageEchoesNft sender = {account} />\n            </Route>\n            <Route path=\"/replicant-apsales\">\n              <ReplicantApSales sender = {account} />\n            </Route>\n            <Route path = \"/\">\n              <Home/>\n            </Route>\n        </Switch>\n\n      </div>\n \n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n}));\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export function createAsa(params,from,assetName, assetUnitName,assetDecimals,assetTotal,assetUrl,assetFreeze,assetManager,assetReserve,assetDefaultFrozen,assetMetadataHash,note){\n    let  txn = {\n       ...params,\n       fee: 1000,\n       flatFee: true,\n       type: 'acfg',\n       from: from,\n       assetName: assetName,\n       assetUnitName: assetUnitName,\n       assetDecimals: assetDecimals,\n       assetTotal: assetTotal,\n       assetURL: assetUrl,\n       assetFreeze: assetFreeze,\n       assetManager: assetManager,\n       assetReserve: assetReserve,\n       assetDefaultFrozen: assetDefaultFrozen,\n       assetClawback:from,\n       assetMetadataHash,\n       note\n     };\n   return txn;\n }\n export function clawbackAsa(params,sender,assetIndex,assetFreeze,assetManager,assetReserve,assetClawback){\n    let  txn = {\n         ...params,\n         fee: 1000,\n         flatFee: true,\n         type: 'acfg',\n         from: sender,\n         assetIndex: assetIndex,\n         assetFreeze: assetFreeze,\n         assetManager: assetManager,\n         assetReserve: assetReserve,\n         assetClawback:assetClawback\n       };\n \n       return txn;\n }\n export function connectToWallet(myalgoconnect){\n    return new Promise(async(resolve,reject)=>{\n        let addresses;\n        try{\n            addresses = await myalgoconnect.connect();\n            resolve(addresses)\n        }catch(error){\n            reject(error);\n        }       \n    });\n}\n\nexport async function isConnected(addresses,myalgoconnect){\n    return new Promise(async(resolve,reject)=>{\n        if(addresses.length==0){\n            try{\n               let addr =  await connectToWallet(myalgoconnect)\n               addresses= addr;\n               console.log(addr);\n               resolve(addresses);\n            }catch(error){\n             console.error(error);\n              reject(false);    \n            } \n         }else{\n              resolve(true);\n         }\n    })\n}\n\nexport const replicantAsaInfo =[\n    {\n        name:`EPOCH, \"REPLICANTS,\" 1/20`,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/R\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"ade0c8cffa3e9744d03f28bacbcad7fa\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 2/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/S\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"c2ee12c2130a1adb33fc9e6c5df2a6f9\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 3/20',\n        unit:\"EPOCH\",\n        url:\"hhttps://api.uncopied.art/c/v/T\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"0df8673ca2baad10052770879f454182\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 4/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/U\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"a44b20ee6eadae2a8566c98646f8953d\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 5/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/V\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"493b944add91650c343c667da1d2778a\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 6/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/W\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"2774e1768a91295e5f4a2c4196552766\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 7/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/X\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"2dcdf8eea215622a3b3e3a57564a8e3f\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 8/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/Y\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"ce6dd633727e11f1d3dc11ec44200a4a\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 9/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/Z\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"57c5fb965fd5e75d4547096be05e62a5\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 10/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/a\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"193a34f7ef614104d0cc29e38317cadf\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 11/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/b\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"9800a1645372a1d00de5286bc92b3620\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 12/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/c\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"08239aa24a16d71e0cfcfea13ab78eb1\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 13/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/d\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"a069d6a47f72561e7e99394940eef53b\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 14/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/e\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"f1f63507e06a43f01d777d7dea867273\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 15/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/f\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"e893d6016514d054ba9f8d02f10617e0\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 16/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/g\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"df3cdeebfe1ef4306244dcad8a31bd17\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 17/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/h\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"c3cb26cc3a850343a7adf98d34cb2ebe\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 18/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/i\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"e2ab0dcc6dd7ed08702d7f99b43bfcfd\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 19/20' ,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/j\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"f30cf70d2f5f96fa66f9337674106c77\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 20/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/k\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"c06c6f36a68e6db14227e83d72a241f6\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 1/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/l\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"68ee4013dd013439022559a56be3f258\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },  \n    {\n        name:'EPOCH, \"REPLICANTS,\" 2/10 AP' ,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/m\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"b29804cf8204806934e996fba6163174\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 3/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/n\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"26a7b7b04ae7d90de6bfb43bde23a34b\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 4/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/o\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"720fea36a4928468c1964f7353ae17c7\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },  \n\n    {\n        name:'EPOCH, \"REPLICANTS,\" 5/10 AP' ,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/p\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"759e329bf37330a58be15a90aa909136\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 6/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/q\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"24f0b1122f8b7c3fb23c72120868f6fb\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 7/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/r\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"6d02874a0dac7ca9f633156808b818f3\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },  \n    {\n        name:'EPOCH, \"REPLICANTS,\" 8/10 AP' ,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/s\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"f1cde5d61ea606ccf3673eca97a47dc7\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 9/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/t\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"2ebddddf90bc009250ce8404805033c1\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 10/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/u\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"ad73a489fe67dbf6ffb508f37ba9483d\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },  \n\n]\n\nvar replicantasssetCreatorAddress = \"VTAUB5LOVTWKXICWEDBO5UG2JNNGEW7ULRB4PQB23DGRKSAXDVPORQNZJE\"\nvar replicantArtist1Address= \"M2WNUPEYKJTIQBYG2IUGXE3FWHN6EBEA6S7AF63O7OPBMUUEMB2UBYLI5Q\";\nvar replicantArtist2Address = \"NL2YCOBKWPI35PYSU4LGNM2II4PW7C766GJCRLFSDNVS47AV2MRHZ7A7FI\";\nvar replicantArtist3Address= \"FUZIWXSI2RTPW65MG475T7XKFC4O6LFPNG6J33RN4U2O4VZZQWMGFU6M24\";\nvar replicantArtist4Address = \"LJX5SYXKAIXZ5PXBHJA4KBVHRHV5DWJ2MUBC2CWDAQIYFYOQVENLC4CYO4\";\nvar replicantArtist5Address = \"2A7KDBW3BJMGNNKF563QOVYC466POE5MTFXUVODNPTZRMDFZTHFYC7ZJFM\";\nvar replicantArtist6Address = \"3FT4J6OASHOTMXUVNJO5NC4WBQ75WUCBZFLFFL5BJPE6SRXFXOJ2RYYP7E\";\nvar replicantArtist7Address = \"YH3UYXKH6RDLDKNVVZCLXJI3HPNLXYKT5I7UPDV33UQCFO7CYIU6KJN6BE\";\nvar replicantArtist8Address = \"SDLB42ELW7ZDAYLSANL5AWLM7CKJPAW5FVNYE3PBCMVC7JMWHEZ7NKPPOE\"\nvar replicantArtist9Address = \"SEUECQKE4P7UEPBRA4GNXHVCGAIRRACDZHOONP6Q4HKT3YRYA3LKS62E7I\"\nexport const replicantApAppIds = [ 387034562, 387161797, 387166820, 387169663, 387171644, 387175171, 387176902, 387179258, 387181363, 387185953];\nexport const replicantApAssetIds = [ 386913525, 386913526, 386913527, 386913528, 386913529, 386913530, 386913531, 386913532, 386913533,  386913534 ]\nexport const replicantArtistAddresses = [{name:  \"Gordon\", address: replicantArtist1Address}, {name: \"Galath3A\", address: replicantArtist2Address}, {name: \"Hung\", address: replicantArtist3Address},\n{name: \"keiken\", address: replicantArtist4Address}, {name: \"Katja\", address: replicantArtist5Address}, {name: \"Jennifer\", address: replicantArtist6Address},\n {name: \"Woo\", address: replicantArtist7Address}, {name: \"Qianqian\", address: replicantArtist8Address}, {name: \"Konrad\", address: replicantArtist9Address},\n  {name: \"Epoch\", address: replicantasssetCreatorAddress} ]\n\n\nexport function getReplicantAsaToClawbackInfo(params,sender, assetFreeze,assetManager,assetReserve,assetClawback){\n    const asaArray = [386913126, 386913127, 386913128, 386913129, 386913130, 386913131, 386913132, 386913133, 386913134, 386913135, 386913136, 386913137, 386913138, 386913139, 386913140, 386913141, 386913521, 386913522, 386913523, 386913524, 386913525, 386913526, 386913527, 386913528, 386913529, 386913530, 386913531, 386913532, 386913533,  386913534  ];\n    let assetClawbackAddresses = [\n        'I4ZSBYX3VWK2YTXJUL5OYGHSGWMDFUKAGIYVMKJ2IYKL6BAIMOIDXMQXIU',\n        'WOJ2IVQZQPL6AUGFQRS3MBXMZU5OHHJF7TTYMS6AJYCFOVFNIVGP5LEMPY',\n        'A2SVRPFMMK4C3UT7DH2K2T67ZSAWULRWWJ2MXM35KP4PUXACVV36H3TJ3Q',\n        '4QHKQTHOPX56EZ4BHB3XQH4A67XTC5W6RQWVLHVML24TZXWC6SI7D7TRUA',\n        'CKU7IAJAOJCD7O2GUQU4AJAD2RAR75MXJOOV33DBYATZNC5BSHTTEOT6IE',\n        'GA7AGJTASCQVXRCN37UWOVJABR6R3ZV3I2CYL3RXWDPYM62OKRNCL3EPHI',\n        '7BSRUQJ6HISD64J6NDRQUPTJ4V2KID2CRWJDLGYVVJSCIDOTTXOBN7DRBM',\n        'GV45TIXAM5UKCDJAYYX5YZDMKCAPY5JKOQ6AFCBQ74A7AABSRTK24HLL6I',\n        'WI4WKILJUFLC2B2ZJCAGXLDIIDDL2ANMYVOVAWRG6UC5D47VHFNNJVK6LI',\n        'FAZ5K4IUAU3QHPYL6BNNMIZNJLCCH23CNU5ZM6TIWMQWINMQZLOAW4BTZQ',\n        'OLDAM3X7AB27UELP6PB2IFOMQDPQGVXTYQVB3ZPF7CCNOPPNKXUP77NXWA',\n        'PLKZCOUQN7XKM5JWPHLA4QMFPGK5UBFDG5CJL3NWR5TGHXPCMZN46QXUOY',\n        '4LEGSUWJ7AQC6PF6G2YGE44MAVZHQVESPU32L5DMGJ624AFGVF6OPXVK4Y',\n        'RC57SFERNNM5W635Z7RVYYXKHLCFHXEPLJNMVC7NMUDHIHZP42KV3E6QA4',\n        'IYXVCSD6HQVB3H3LXEZYR5YOKFX3ZRD6UVED3BUDJAQYGP6RRYZUPBY4ZU',\n        'RDZU72UJ37724XIMMRCEHS3XB6B6SZZ7SVXGYRFWU5PZNY4EJU22HRO5NE',\n        '7H4RWJ65Y65THWFF3OR3Q74PRGVMPZWVMFCKBEICUXSQRLPFH6QXMIYXRE',\n        'AYD43MHQB7RSMD6XAWLTH7CRPUAVINRLOUYHHKUEXYO5QKGGUWDAN63WJU',\n        'GYPGD6AY32GRHNPMWL4LNMJLS3UYNEWI5QQVYVRUS75HD2CPKBFQPHOEJA',\n        'SM6VTVE4YFRJYK4ZZCZ7PIQMNZ4KXZD3KTHCWR54LGY2MPHMZTC2MP2KXM',\n        'DLDDVRVH47I3F6BQH63CXKQG7IBG7RWBX7HD3HITOTSZ4WRKLDXBOFYKUY',\n        'YEU3N6UI245NMW4JQYRUTCRUOV2YFJYDNGDLV7MVZOESHXI3KUXXN6Y3M4',\n        'TEX2UK4ZSFUVP4EMZPRFXER4SFDMDPDGU46K7A7IQPQ75ZIHMOV65MMMM4',\n        'UH2MRZ33XNVGMNG3YITPWQ4UPCZNWOEA2BUPHP6ANWXEMZLZRJKXQWJEO4',\n        'LOIUC53KK64GZXKLSD7KPFJBZ2WZVQHSIUFVWR4PKBEJ2CKBMCSJY4BOTM',\n        'DNJ5TR7TEB34I73VTS57OE7MEPLP3XJXZPWGQIPPUMEQAG5WZRQXFKVO4Q',\n        'RIC4VM2GX2TATLAFSMZIF7WQD56YNTCFYOTB26VFVCVJKXLPPPNEKUP4BY',\n        'MLFJDLAMRYWTKGHELCO3ETHPDAGBZNJBK27TGET4MNXTGZMYOMM4AMFBGQ',\n        'XQNWEAKIGYLGJUZEUVFLLKFOEIWLLN2Q4YLAENLBXGINVSEPTBPXCO6FLM',\n        'EKEGZMTE2WYAEJZG5CMEH5GOEWLLHAQL7MHL3HN7SVFI5FRO6X3TASTSUY'\n      ]\n\n    let asaInfos = asaArray.map((el, index) => {\n        return {\n            ...params,\n            fee: 1000,\n            flatFee: true,\n            type: 'acfg',\n            from: sender,\n            assetIndex: el,\n            assetFreeze: assetFreeze,\n            assetManager: assetManager,\n            assetReserve: assetReserve,\n            assetClawback:assetClawbackAddresses[index]\n          };\n    });\n    return asaInfos;\n} \n\nexport async function compileReplicantProgram(client){\n    const replicantSource=`#pragma version 4\n\n    int 0\n    txn ApplicationID\n    ==\n    bnz creation\n    \n    int UpdateApplication\n    txn OnCompletion\n    ==\n    bnz updateApp\n    \n    int DeleteApplication\n    txn OnCompletion\n    ==\n    bnz DeleteApp\n    \n    //=== Condition to freeze or unfreeze contract\n    txn ApplicationArgs 0\n    byte \"unfreeze_contract\"\n    ==\n    bnz unfreeze_contract\n    \n    txn ApplicationArgs 0\n    byte \"freeze_contract\"\n    ==\n    bnz freeze_contract\n    \n    \n    //Check if contract is frozen\n    byte \"contract_frozen\"\n    app_global_get\n    int 1\n    ==\n    bnz contract_frozen\n    \n    txn ApplicationArgs 0\n    byte \"set_price\"\n    ==\n    bnz set_price\n    \n    //======Condition to decide if an NFT should be sent to an artist for free=====\n    txn ApplicationArgs 0\n    byte \"sell_nft\"\n    ==\n    byte \"creator\"\n    app_global_get\n    gtxn 0 AssetSender\n    ==\n    &&\n    byte \"ap_edition\"\n    app_global_get\n    int 1\n    ==\n    &&\n    byte \"ap_artist\"\n    app_global_get\n    gtxn 0 AssetReceiver\n    ==\n    &&\n    byte \"tx_sent_to_artist\"\n    app_global_get\n    int 0\n    ==\n    &&\n    bnz send_tx_to_artist\n    \n    //=== Condition to check for secondary sale or primary sale\n    txn ApplicationArgs 0\n    byte \"sell_nft\"\n    ==\n    byte \"creator\"\n    app_global_get\n    gtxn 0 AssetSender\n    ==\n    &&\n    bnz primary_sale_txn\n    \n    txn ApplicationArgs 0\n    byte \"sell_nft\"\n    ==\n    byte \"creator\"\n    app_global_get\n    gtxn 0 AssetSender\n    !=\n    &&\n    bnz secondary_sale_txn\n    \n    \n    \n    \n    \n    \n    secondary_sale_txn:\n    global GroupSize\n    int 14\n    ==\n    gtxn  0 AssetAmount\n    int 1\n    ==\n    &&\n    byte \"asset_id\"\n    app_global_get\n    gtxn 0 XferAsset\n    ==\n    &&\n    byte \"price\"\n    app_global_get\n    int 0\n    !=\n    &&\n    gtxn 0 AssetSender\n    gtxn 2 Receiver\n    ==\n    &&\n    byte \"creator\"\n    app_global_get\n    gtxn 3 Receiver\n    ==\n    &&\n    byte \"Gordon\"\n    app_global_get\n    gtxn 4 Receiver\n    ==\n    &&\n    byte \"Galath3a\"\n    app_global_get\n    gtxn 5 Receiver\n    ==\n    &&\n    byte \"Hung\"\n    app_global_get\n    gtxn 6 Receiver\n    ==\n    &&\n    byte \"Keiken\"\n    app_global_get\n    gtxn 7 Receiver\n    ==\n    &&\n    byte \"Katja\"\n    app_global_get\n    gtxn 8 Receiver\n    ==\n    &&\n    byte \"Jennifer\"\n    app_global_get\n    gtxn 9 Receiver\n    ==\n    &&\n    byte \"Woo\"\n    app_global_get\n    gtxn 10 Receiver\n    ==\n    &&\n    byte \"Qianqian\"\n    app_global_get\n    gtxn 11 Receiver\n    ==\n    &&\n    byte \"Konrad\"\n    app_global_get\n    gtxn 12 Receiver\n    ==\n    &&\n    gtxn 2 Amount\n    gtxn 3 Amount\n    +\n    gtxn 4 Amount\n    +\n    gtxn 5 Amount\n    +\n    gtxn 6 Amount\n    +\n    gtxn 7 Amount\n    +\n    gtxn 8 Amount\n    +\n    gtxn 9 Amount\n    +\n    gtxn 10 Amount\n    +\n    gtxn 11 Amount\n    +\n    gtxn 12 Amount\n    +\n    gtxn 13 Amount\n    +\n    store 10\n    int 100000\n    store 11\n    int 2000\n    store 12\n    byte \"price\"\n    app_global_get\n    load 10\n    ==\n    &&\n    gtxn 2 Amount\n    load 11\n    *\n    load 10\n    /\n    int 79000\n    ==\n    &&\n    gtxn 3 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 4 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 5 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 6 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 7 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 8 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 9 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 10 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 11 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    &&\n    gtxn 12 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    ==\n    gtxn 13 Amount\n    load 11\n    *\n    load 10\n    /\n    int 1000\n    ==\n    &&\n    //Save new owner\n    byte \"owner\"\n    gtxn 0 AssetReceiver\n    app_global_put\n    //Freeze contract\n    byte \"contract_frozen\"\n    int 1\n    app_global_put\n    return\n    \n    \n    \n    //== Primary Sale transaction\n    primary_sale_txn:\n    global GroupSize \n    int 12\n    ==\n    gtxn 0 AssetAmount\n    int 1\n    ==\n    &&\n    byte \"asset_id\"\n    app_global_get\n    gtxn 0 XferAsset\n    ==\n    &&\n    gtxn 2 Receiver\n    gtxn 0 AssetSender\n    ==\n    &&\n    byte \"creator\"\n    app_global_get\n    gtxn 2 Receiver\n    ==\n    &&\n    byte \"Gordon\"\n    app_global_get\n    gtxn 3 Receiver\n    ==\n    &&\n    byte \"Galath3a\"\n    app_global_get\n    gtxn 4 Receiver\n    ==\n    &&\n    byte \"Hung\"\n    app_global_get\n    gtxn 5 Receiver\n    ==\n    &&\n    byte \"Keiken\"\n    app_global_get\n    gtxn 6 Receiver\n    ==\n    &&\n    byte \"Katja\"\n    app_global_get\n    gtxn 7 Receiver\n    ==\n    &&\n    byte \"Jennifer\"\n    app_global_get\n    gtxn 8 Receiver\n    ==\n    &&\n    byte \"Woo\"\n    app_global_get\n    gtxn 9 Receiver\n    ==\n    &&\n    byte \"Qianqian\"\n    app_global_get\n    gtxn 10 Receiver\n    ==\n    &&\n    byte \"Konrad\"\n    app_global_get\n    gtxn 11 Receiver\n    ==\n    &&\n    gtxn 2 Amount\n    gtxn 3 Amount\n    +\n    gtxn 4 Amount\n    +\n    gtxn 5 Amount\n    +\n    gtxn 6 Amount\n    +\n    gtxn 7 Amount\n    +\n    gtxn 8 Amount\n    +\n    gtxn 9 Amount\n    +\n    gtxn 10 Amount\n    +\n    gtxn 11 Amount\n    +\n    store 10\n    int 100000\n    store 11\n    int 7777\n    store 12\n    load 10\n    int 2424000000\n    >=\n    &&\n    gtxn 2 Amount\n    load 11\n    *\n    load 10\n    /\n    int 30000\n    >=\n    &&\n    gtxn 3 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 4 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 5 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 6 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 7 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 8 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 9 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 10 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    gtxn 11 Amount\n    load 11\n    *\n    load 10\n    /\n    load 12\n    >=\n    &&\n    //Save new owner\n    byte \"owner\"\n    gtxn 0 AssetReceiver\n    app_global_put\n    //Freeze contract\n    byte \"contract_frozen\"\n    int 1\n    app_global_put\n    return\n    \n    \n    \n    \n    \n    send_tx_to_artist:\n    byte \"tx_sent_to_artist\"\n    int 1\n    app_global_put\n    byte \"owner\"\n    gtxn 0 AssetReceiver\n    app_global_put\n    //Freeze contract\n    byte \"contract_frozen\"\n    int 1\n    app_global_put\n    int 1\n    return\n    \n    \n    \n    \n    contract_frozen:\n    int 0\n    return\n    \n    unfreeze_contract:\n    byte \"contract_frozen\"\n    int 0\n    app_global_put\n    \n    byte \"owner\"\n    app_global_get\n    txn Sender\n    ==\n    return\n    \n    freeze_contract:\n    byte \"contract_frozen\"\n    int 1\n    app_global_put\n    \n    byte \"owner\"\n    app_global_get\n    txn Sender\n    ==\n    return\n    \n    \n    set_price:\n    byte \"price\"\n    txn ApplicationArgs 1\n    btoi\n    app_global_put\n    \n    byte \"owner\"\n    app_global_get\n    txn Sender\n    ==\n    return\n    \n    \n    creation:\n    // Save creator's address\n    byte \"creator\"\n    txn ApplicationArgs 0\n    app_global_put\n    //Save edition \n    byte \"edition\"\n    txn ApplicationArgs 1\n    btoi\n    app_global_put\n    //Save if it is an AP edition\n    byte \"ap_edition\"\n    txn ApplicationArgs 2\n    btoi\n    app_global_put\n    //Save asset info\n    byte \"asset_id\"\n    txn ApplicationArgs 3\n    btoi\n    app_global_put\n    //Save ap_artist\n    byte \"ap_artist\"\n    txn ApplicationArgs 4\n    app_global_put\n    //Save Epoch's address\n    byte \"epoch\"\n    txn ApplicationArgs 5\n    app_global_put\n    //Save Gordon's Address\n    byte \"Gordon\"\n    txn ApplicationArgs 6\n    app_global_put\n    //Save Galath3a's address\n    byte \"Galath3a\"\n    txn ApplicationArgs 7\n    app_global_put\n    //Save Hung's address\n    byte \"Hung\"\n    txn ApplicationArgs 8\n    app_global_put\n    //Save Keiken's address\n    byte \"Keiken\"\n    txn ApplicationArgs 9\n    app_global_put\n    //Save Katja's address\n    byte \"Katja\"\n    txn ApplicationArgs 10\n    app_global_put\n    //Save Jennifer's address\n    byte \"Jennifer\"\n    txn ApplicationArgs 11\n    app_global_put\n    //Save Woo's address\n    byte \"Woo\"\n    txn ApplicationArgs 12\n    app_global_put\n    //Save Qianqian's address\n    byte \"Qianqian\"\n    txn ApplicationArgs 13\n    app_global_put\n    //Save Konrad's address\n    byte \"Konrad\"\n    txn ApplicationArgs 14\n    app_global_put\n    //Save Price information\n    byte \"price\"\n    int 0\n    app_global_put\n    //Save boolean for if the artist has received his ap edition\n    byte \"tx_sent_to_artist\"\n    int 0\n    app_global_put\n    //Save boolean to freeze or unfreeze contract\n    byte \"contract_frozen\"\n    int 0\n    app_global_put\n    \n    byte \"owner\"\n    txn ApplicationArgs 0\n    app_global_put\n    \n    int 1\n    return\n    \n    \n    \n    updateApp:\n    byte \"creator\"\n    app_global_get\n    txn Sender\n    ==\n    return\n    \n    DeleteApp:\n    byte \"creator\"\n    app_global_get\n    txn Sender\n    ==\n    return\n    \n    `\n    return new Promise(async(resolve,reject)=>{\n        try{\n            const results = await client.compile(replicantSource).do();\n            resolve(results)\n        }catch(error){\n           reject(error) \n        }\n       \n    });\n}\n\n\nexport async function compileStatelessProgram(client, assetId, appId){\n    var statelessProgram = `\n    #pragma version 4\n    txn RekeyTo\n    global ZeroAddress\n    ==\n    txn CloseRemainderTo\n    global ZeroAddress\n    ==\n    &&\n    txn  XferAsset\n    int ${assetId}\n    ==\n    &&\n    gtxn 1 ApplicationID\n    int ${appId}\n    ==\n    &&\n    return`\n    return new Promise(async(resolve,reject)=>{\n        try{\n            const results = await client.compile(statelessProgram).do();\n            resolve(results)\n        }catch(error){\n           reject(error) \n        }\n       \n    });\n}\n\nexport  async function compileClearProgram(client){\n    var clearProgramSource=`#pragma version 4\n    int 1`\n    return new Promise(async(resolve,reject)=>{\n        try{\n            const results = await client.compile(clearProgramSource).do();\n            resolve(results)\n        }catch(error){\n           reject(error) \n        }\n       \n    });\n}\n\nexport  function updateApplication(appId, approvalProgram,clearProgram,params,from){\n    return{\n        ...params,\n        fee:1000,\n        flatFee: true,\n        type: \"appl\",\n        from,\n      appIndex: appId,\n      appOnComplete: 4,\n      appApprovalProgram: approvalProgram,\n      appClearProgram: clearProgram,\n    }\n  }\n\n  export async function getAssetClawbackTxn(sender, params, clawback, note, assetId, algosdk) {\n    note = new Uint8Array(Buffer.from(note,\"base64\"));\n    let ctxn = algosdk.makeAssetConfigTxnWithSuggestedParams(sender, note, \n        assetId, sender, sender, sender, clawback, params);\n    return ctxn;\n}\n\n\nexport async function groupTxns(txns, algosdk){\n    let groupId = algosdk.computeGroupID(txns);\n    txns = txns.map((el)=>{\n        el.group=groupId;\n        return el;\n        });\n    return txns;\n}"],"sourceRoot":""}