{"version":3,"sources":["utils/utils.js","logo.svg","screens/ApSales.js","assets/images/replicantImage.jpeg","screens/HomeScreen.js","screens/Home.js","screens/ReplicantNftCreation.js","App.js","reportWebVitals.js","index.js"],"names":["createAsa","params","from","assetName","assetUnitName","assetDecimals","assetTotal","assetUrl","assetFreeze","assetManager","assetReserve","assetDefaultFrozen","assetMetadataHash","note","fee","flatFee","type","assetURL","assetClawback","connectToWallet","myalgoconnect","Promise","resolve","reject","a","connect","addresses","isConnected","length","addr","console","log","error","replicantAsaInfo","name","unit","url","total","metadataHash","Uint8Array","Buffer","decimals","getAsaToClawbackInfo","sender","assetClawbackAddresses","map","el","index","assetIndex","useStyles","makeStyles","theme","root","flexGrow","marginTop","marginLeft","marginRight","paper","padding","spacing","textAlign","color","palette","text","secondary","height","display","flexDirection","alignItems","position","typohraphy","fontSize","horDiv","justifyContent","buttonDiv","width","progress","top","left","ApSales","neilBerloufa","sarahLosena","aliceBucknell","juanCoveli","alexandra","amandaRoss","hiradSab","epochBase64Address","useState","P1Loading","setP1Loading","P2Loading","setP2Loading","P3Loading","setP3Loading","P4Loading","setP4Loading","P5Loading","setP5Loading","P6Loading","setP6Loading","P7Loading","setP7Loading","D1Visible","setD1Visible","D1Text","setD1Text","D1Title","setD1Title","handleCloseD1","D2Visible","setD2Visible","D2Text","setD2Text","D2Title","setD2Title","handleCloseD2","D3Visible","setD3Visible","D3Text","setD3Text","D3Title","setD3Title","handleCloseD3","D4Visible","setD4Visible","D4Text","setD4Text","D4Title","setD4Title","handleCloseD4","D5Visible","setD5Visible","D5Text","setD5Text","D5Title","setD5Title","handleCloseD5","D6Visible","setD6Visible","D6Text","setD6Text","D6Title","setD6Title","handleCloseD6","D7Visible","setD7Visible","D7Text","setD7Text","D7Title","setD7Title","handleCloseD7","program","lsig","algosdk","makeLogicSig","MyAlgoConnect","assetIds","applicationId","token","client","Algodv2","classes","Indexer","className","Grid","container","item","xs","Paper","elevation","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","autoFocus","CircularProgress","Typography","variant","style","wordWrap","inline","getTransactionParams","do","appCallTxn","makeApplicationCallTransaction","address","zeroSendTxn","sendFunds","assetSendTxn","sendAsset","txns","groupId","computeGroupID","group","signedTxn0","signLogicSigTransaction","signedTxns","signTransaction","JSON","stringify","blobs","blob","signedTest","txTest","sendRawTransaction","txId","undefined","appId","appArgs","appOnComplete","appIndex","receiver","amount","to","assetID","revocationTarget","recipient","units","algodClient","xtxn","makeAssetTransferTxnWithSuggestedParams","replicantImage","borderRadius","border","borderColor","itemTitle","primary","main","itemButton","HomeScreen","history","useHistory","src","push","Home","centerGridItem","ReplicantNftCreation","loading","setLoading","dialogVisible","controlDialog","dialogTitle","setDialogTitle","dialogDescription","setDialogDescription","connector","WalletConnect","bridge","qrcodeModal","QRCodeModal","connected","createSession","on","payload","accounts","makeAssetCreateTxnWithSuggestedParams","txnsToSign","txn","encodeUnsignedTransaction","toString","message","requestParams","request","formatJsonRpcRequest","sendCustomRequest","result","decodedResult","element","killSession","makeAssetConfigTxnWithSuggestedParams","menuButton","title","list","fullList","App","props","anchor","React","bottom","right","state","setState","pageTitle","setPageTitle","toggleDrawer","event","key","AppBar","Toolbar","IconButton","edge","Drawer","role","onKeyDown","List","ListItem","button","ListItemIcon","ListItemText","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77afee68.chunk.js","sourcesContent":["export function createAsa(params,from,assetName, assetUnitName,assetDecimals,assetTotal,assetUrl,assetFreeze,assetManager,assetReserve,assetDefaultFrozen,assetMetadataHash,note){\n    let  txn = {\n       ...params,\n       fee: 1000,\n       flatFee: true,\n       type: 'acfg',\n       from: from,\n       assetName: assetName,\n       assetUnitName: assetUnitName,\n       assetDecimals: assetDecimals,\n       assetTotal: assetTotal,\n       assetURL: assetUrl,\n       assetFreeze: assetFreeze,\n       assetManager: assetManager,\n       assetReserve: assetReserve,\n       assetDefaultFrozen: assetDefaultFrozen,\n       assetClawback:from,\n       assetMetadataHash,\n       note\n     };\n   return txn;\n }\n export function clawbackAsa(params,sender,assetIndex,assetFreeze,assetManager,assetReserve,assetClawback){\n    let  txn = {\n         ...params,\n         fee: 1000,\n         flatFee: true,\n         type: 'acfg',\n         from: sender,\n         assetIndex: assetIndex,\n         assetFreeze: assetFreeze,\n         assetManager: assetManager,\n         assetReserve: assetReserve,\n         assetClawback:assetClawback\n       };\n \n       return txn;\n }\n export function connectToWallet(myalgoconnect){\n    return new Promise(async(resolve,reject)=>{\n        let addresses;\n        try{\n            addresses = await myalgoconnect.connect();\n            resolve(addresses)\n        }catch(error){\n            reject(error);\n        }       \n    });\n}\n\nexport async function isConnected(addresses,myalgoconnect){\n    return new Promise(async(resolve,reject)=>{\n        if(addresses.length==0){\n            try{\n               let addr =  await connectToWallet(myalgoconnect)\n               addresses= addr;\n               console.log(addr);\n               resolve(addresses);\n            }catch(error){\n             console.error(error);\n              reject(false);    \n            } \n         }else{\n              resolve(true);\n         }\n    })\n}\n\nexport const replicantAsaInfo =[\n    {\n        name:`EPOCH, \"REPLICANTS,\" 1/20`,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/R\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"ade0c8cffa3e9744d03f28bacbcad7fa\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 2/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/S\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"c2ee12c2130a1adb33fc9e6c5df2a6f9\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 3/20',\n        unit:\"EPOCH\",\n        url:\"hhttps://api.uncopied.art/c/v/T\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"0df8673ca2baad10052770879f454182\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 4/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/U\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"a44b20ee6eadae2a8566c98646f8953d\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 5/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/V\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"493b944add91650c343c667da1d2778a\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 6/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/W\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"2774e1768a91295e5f4a2c4196552766\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 7/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/X\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"2dcdf8eea215622a3b3e3a57564a8e3f\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 8/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/Y\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"ce6dd633727e11f1d3dc11ec44200a4a\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 9/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/Z\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"57c5fb965fd5e75d4547096be05e62a5\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 10/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/a\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"193a34f7ef614104d0cc29e38317cadf\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 11/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/b\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"9800a1645372a1d00de5286bc92b3620\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 12/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/c\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"08239aa24a16d71e0cfcfea13ab78eb1\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 13/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/d\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"a069d6a47f72561e7e99394940eef53b\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 14/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/e\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"f1f63507e06a43f01d777d7dea867273\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 15/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/f\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"e893d6016514d054ba9f8d02f10617e0\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 16/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/g\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"df3cdeebfe1ef4306244dcad8a31bd17\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 17/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/h\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"c3cb26cc3a850343a7adf98d34cb2ebe\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 18/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/i\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"e2ab0dcc6dd7ed08702d7f99b43bfcfd\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 19/20' ,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/j\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"f30cf70d2f5f96fa66f9337674106c77\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 20/20',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/k\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"c06c6f36a68e6db14227e83d72a241f6\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 1/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/l\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"68ee4013dd013439022559a56be3f258\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },  \n    {\n        name:'EPOCH, \"REPLICANTS,\" 2/10 AP' ,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/m\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"b29804cf8204806934e996fba6163174\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 3/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/n\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"26a7b7b04ae7d90de6bfb43bde23a34b\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 4/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/o\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"720fea36a4928468c1964f7353ae17c7\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },  \n\n    {\n        name:'EPOCH, \"REPLICANTS,\" 5/10 AP' ,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/p\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"759e329bf37330a58be15a90aa909136\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 6/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/q\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"24f0b1122f8b7c3fb23c72120868f6fb\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 7/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/r\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"6d02874a0dac7ca9f633156808b818f3\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },  \n    {\n        name:'EPOCH, \"REPLICANTS,\" 8/10 AP' ,\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/s\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"f1cde5d61ea606ccf3673eca97a47dc7\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 9/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/t\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"2ebddddf90bc009250ce8404805033c1\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },\n    {\n        name:'EPOCH, \"REPLICANTS,\" 10/10 AP',\n        unit:\"EPOCH\",\n        url:\"https://api.uncopied.art/c/v/u\",\n        total:1,\n        metadataHash:new Uint8Array(Buffer.from(\"ad73a489fe67dbf6ffb508f37ba9483d\")),\n        decimals:0,\n        note: new Uint8Array(Buffer.from( \"\"))\n    },  \n\n]\n\nexport function getAsaToClawbackInfo(params,sender, assetFreeze,assetManager,assetReserve,assetClawback){\n    const asaArray = [386913126, 386913127, 386913128, 386913129, 386913130, 386913131, 386913132, 386913133, 386913134, 386913135, 386913136, 386913137, 386913138, 386913139, 386913140, 386913141, 386913521, 386913522, 386913523, 386913524, 386913525, 386913526, 386913527, 386913528, 386913529, 386913530, 386913531, 386913532, 386913533,  386913534  ];\n    let assetClawbackAddresses = [\n        'I4ZSBYX3VWK2YTXJUL5OYGHSGWMDFUKAGIYVMKJ2IYKL6BAIMOIDXMQXIU',\n        'WOJ2IVQZQPL6AUGFQRS3MBXMZU5OHHJF7TTYMS6AJYCFOVFNIVGP5LEMPY',\n        'A2SVRPFMMK4C3UT7DH2K2T67ZSAWULRWWJ2MXM35KP4PUXACVV36H3TJ3Q',\n        '4QHKQTHOPX56EZ4BHB3XQH4A67XTC5W6RQWVLHVML24TZXWC6SI7D7TRUA',\n        'CKU7IAJAOJCD7O2GUQU4AJAD2RAR75MXJOOV33DBYATZNC5BSHTTEOT6IE',\n        'GA7AGJTASCQVXRCN37UWOVJABR6R3ZV3I2CYL3RXWDPYM62OKRNCL3EPHI',\n        '7BSRUQJ6HISD64J6NDRQUPTJ4V2KID2CRWJDLGYVVJSCIDOTTXOBN7DRBM',\n        'GV45TIXAM5UKCDJAYYX5YZDMKCAPY5JKOQ6AFCBQ74A7AABSRTK24HLL6I',\n        'WI4WKILJUFLC2B2ZJCAGXLDIIDDL2ANMYVOVAWRG6UC5D47VHFNNJVK6LI',\n        'FAZ5K4IUAU3QHPYL6BNNMIZNJLCCH23CNU5ZM6TIWMQWINMQZLOAW4BTZQ',\n        'OLDAM3X7AB27UELP6PB2IFOMQDPQGVXTYQVB3ZPF7CCNOPPNKXUP77NXWA',\n        'PLKZCOUQN7XKM5JWPHLA4QMFPGK5UBFDG5CJL3NWR5TGHXPCMZN46QXUOY',\n        '4LEGSUWJ7AQC6PF6G2YGE44MAVZHQVESPU32L5DMGJ624AFGVF6OPXVK4Y',\n        'RC57SFERNNM5W635Z7RVYYXKHLCFHXEPLJNMVC7NMUDHIHZP42KV3E6QA4',\n        'IYXVCSD6HQVB3H3LXEZYR5YOKFX3ZRD6UVED3BUDJAQYGP6RRYZUPBY4ZU',\n        'RDZU72UJ37724XIMMRCEHS3XB6B6SZZ7SVXGYRFWU5PZNY4EJU22HRO5NE',\n        '7H4RWJ65Y65THWFF3OR3Q74PRGVMPZWVMFCKBEICUXSQRLPFH6QXMIYXRE',\n        'AYD43MHQB7RSMD6XAWLTH7CRPUAVINRLOUYHHKUEXYO5QKGGUWDAN63WJU',\n        'GYPGD6AY32GRHNPMWL4LNMJLS3UYNEWI5QQVYVRUS75HD2CPKBFQPHOEJA',\n        'SM6VTVE4YFRJYK4ZZCZ7PIQMNZ4KXZD3KTHCWR54LGY2MPHMZTC2MP2KXM',\n        'DLDDVRVH47I3F6BQH63CXKQG7IBG7RWBX7HD3HITOTSZ4WRKLDXBOFYKUY',\n        'YEU3N6UI245NMW4JQYRUTCRUOV2YFJYDNGDLV7MVZOESHXI3KUXXN6Y3M4',\n        'TEX2UK4ZSFUVP4EMZPRFXER4SFDMDPDGU46K7A7IQPQ75ZIHMOV65MMMM4',\n        'UH2MRZ33XNVGMNG3YITPWQ4UPCZNWOEA2BUPHP6ANWXEMZLZRJKXQWJEO4',\n        'LOIUC53KK64GZXKLSD7KPFJBZ2WZVQHSIUFVWR4PKBEJ2CKBMCSJY4BOTM',\n        'DNJ5TR7TEB34I73VTS57OE7MEPLP3XJXZPWGQIPPUMEQAG5WZRQXFKVO4Q',\n        'RIC4VM2GX2TATLAFSMZIF7WQD56YNTCFYOTB26VFVCVJKXLPPPNEKUP4BY',\n        'MLFJDLAMRYWTKGHELCO3ETHPDAGBZNJBK27TGET4MNXTGZMYOMM4AMFBGQ',\n        'XQNWEAKIGYLGJUZEUVFLLKFOEIWLLN2Q4YLAENLBXGINVSEPTBPXCO6FLM',\n        'EKEGZMTE2WYAEJZG5CMEH5GOEWLLHAQL7MHL3HN7SVFI5FRO6X3TASTSUY'\n      ]\n\n    let asaInfos = asaArray.map((el, index) => {\n        return {\n            ...params,\n            fee: 1000,\n            flatFee: true,\n            type: 'acfg',\n            from: sender,\n            assetIndex: el,\n            assetFreeze: assetFreeze,\n            assetManager: assetManager,\n            assetReserve: assetReserve,\n            assetClawback:assetClawbackAddresses[index]\n          };\n    });\n    return asaInfos;\n} \n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Buffer } from 'buffer';\n\n\nfunction ApSales(){\nlet neilBerloufa= [\"Neil Beloufa\",\"YGCKHAG4H3WDUQSAY5J4MK5ZIWLGIF7W6ZYO5EZY3OGZJB5FWGDNBX7BUA\"];\nlet sarahLosena=[\"Sarah Rosalena Brady\",\"IKEPBSW7RSPN4TXYC3AV6FOOGZ6PJLTJKEB2PVCTPSRFNB3CANZ5JJRZPY\"];\nlet aliceBucknell=[\"Alice Bucknell\",\"2FSBHE3XAXJHBFFUABPPBBU3ZL4PQAHI6BB3KTHJKL5IZCC7BG4LR6GRT4\"];\nlet juanCoveli=[\"Juan Covelli\",\"UONII5HLZPHGDCBCETVTFGX42I5MJWEYKM5NUIFQW3A47CSDIHZN74AYUA\"];\nlet alexandra=[\"Alexandra Koumantaki\",\"EMMEIOWLZPMUCXSLGB5QOR33HCQZAQT6KSRGCXHBO54W7LNLQCJXSGJ4IQ\"];\nlet amandaRoss=[\"Amanda Ross Ho\",\"UNH443RNFL4NWFCP5AI3N34C6IK6SWDEPZRLFKXGWYTXBZ5BTLJJLGWLRQ\"];\nlet hiradSab=[\"Hirad Sab\",\"QPNWTRS3FLRUICYYLVPQV7QZIJPBNM2EV6S5BF6JOFQL7DGCLU5HKQSUK4\"];\n\nlet epochClawedBackAddress = \"CZJCFCUDUL5GU5IIIADMA4XBDTJEG6JZG5MBYKBTP4NQCFTOT4PDSDN6QU\"\nlet epochBase64Address = \"AyADkE4GgtaLdTMAIDIDEjMBIDIDEhAzAiAyAxIQMwAJMgMSEDMBCTIDEhAzAgkyAxIQMwAVMgMSEDMBFTIDEhAzAhUyAxIQMQEiDhAzAhAjEhAzAhgkEhA=\";\n\nlet[P1Loading,setP1Loading] = useState(false);\nlet[P2Loading,setP2Loading] = useState(false);\nlet[P3Loading,setP3Loading] = useState(false);\nlet[P4Loading,setP4Loading] = useState(false);\nlet[P5Loading,setP5Loading] = useState(false);\nlet[P6Loading,setP6Loading] = useState(false);\nlet[P7Loading,setP7Loading] = useState(false);\n\nlet[D1Visible,setD1Visible] = useState(false);\nlet[D1Text,setD1Text] = useState(\"D1 Text\");\nlet[D1Title,setD1Title]= useState(\"D1 Title\");\nlet handleCloseD1=()=>{\n    setD1Visible(false)\n}\n\n\nlet[D2Visible,setD2Visible] = useState(false);\nlet[D2Text,setD2Text] = useState(\"D1 Text\");\nlet[D2Title,setD2Title]= useState(\"D1 Title\");\nlet handleCloseD2=()=>{\n    setD2Visible(false)\n}\n\n\nlet[D3Visible,setD3Visible] = useState(false);\nlet[D3Text,setD3Text] = useState(\"D1 Text\");\nlet[D3Title,setD3Title]= useState(\"D1 Title\");\nlet handleCloseD3=()=>{\n    setD3Visible(false)\n}\n\n\nlet[D4Visible,setD4Visible] = useState(false);\nlet[D4Text,setD4Text] = useState(\"D1 Text\");\nlet[D4Title,setD4Title]= useState(\"D1 Title\");\nlet handleCloseD4=()=>{\n    setD4Visible(false)\n}\n\n\nlet[D5Visible,setD5Visible] = useState(false);\nlet[D5Text,setD5Text] = useState(\"D1 Text\");\nlet[D5Title,setD5Title]= useState(\"D1 Title\");\nlet handleCloseD5=()=>{\n    setD5Visible(false)\n}\n\n\nlet[D6Visible,setD6Visible] = useState(false);\nlet[D6Text,setD6Text] = useState(\"D1 Text\");\nlet[D6Title,setD6Title]= useState(\"D1 Title\");\nlet handleCloseD6=()=>{\n    setD6Visible(false)\n}\n\nlet[D7Visible,setD7Visible] = useState(false);\nlet[D7Text,setD7Text] = useState(\"D1 Text\");\nlet[D7Title,setD7Title]= useState(\"D1 Title\");\nlet handleCloseD7=()=>{\n    setD7Visible(false)\n}\n\n\n\n\n\n\n\n\nlet program = new Uint8Array(Buffer.from(epochBase64Address,\"base64\"))\nconst lsig = algosdk.makeLogicSig(program);   \n// let [addresses, setAddresses] =useState([]);\nlet addresses =[];\nlet myalgoconnect = new MyAlgoConnect();\nlet assetIds = [245558023,245558024,245558025,245558026,245558027,245558028,245558029,245558030]\nlet applicationId = 245558018;\nconst token = { 'X-API-Key':'ADRySlL0NK5trzqZGAE3q1xxIqlQdSfk1nbHxTNe'};\nconst server = \"https://mainnet-algorand.api.purestake.io/ps2\";\nconst baseServer = \"https://mainnet-algorand.api.purestake.io/idx2\";\nconst port = '';\nconst client = new algosdk.Algodv2(token, server, port);\nlet indexerClient = new algosdk.Indexer(token, baseServer, port);\n\n    const classes = useStyles();\n    return(\n        <div className={classes.root}>\n            <Grid container spacing={3} >\n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                        <Dialog\n                            open={D1Visible}\n                            onClose={handleCloseD1}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{D1Title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{D1Text}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={handleCloseD1} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleCloseD1} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                    {P1Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                    <Typography className={classes.typohraphy}>Name: {neilBerloufa[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{neilBerloufa[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 1/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition1}>Send Epoch edition 1</Button>\n                    </div>\n                </Paper>\n                </Grid>\n            \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                <Dialog\n                            open={D2Visible}\n                            onClose={handleCloseD2}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{D2Title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{D2Text}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={handleCloseD2} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleCloseD2} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                    {P2Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                {P2Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name: {sarahLosena[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{sarahLosena[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 2/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition2}>Send Epoch edition 2</Button>\n                    </div>\n                </Paper>\n                </Grid>\n\n                \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                <Dialog\n                            open={D3Visible}\n                            onClose={handleCloseD3}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{D3Title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{D3Text}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={handleCloseD3} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleCloseD3} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                \n                {P3Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name: {aliceBucknell[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{aliceBucknell[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 3/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition3}>Send Epoch edition 3</Button>\n                    </div>\n                </Paper>\n                </Grid>\n               \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                    <Dialog\n                                open={D4Visible}\n                                onClose={handleCloseD4}\n                                aria-labelledby=\"alert-dialog-title\"\n                                aria-describedby=\"alert-dialog-description\">\n\n                                <DialogTitle id=\"alert-dialog-title\">{D4Title}</DialogTitle>\n                                <DialogContent>\n                                <DialogContentText id=\"alert-dialog-description\">{D4Text}</DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                <Button onClick={handleCloseD4} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button onClick={handleCloseD4} color=\"primary\" autoFocus>\n                                    Ok\n                                </Button>\n                                </DialogActions>\n                            </Dialog>\n\n\n                {P4Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                    <Typography className={classes.typohraphy}>Name: {juanCoveli[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{juanCoveli[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 4/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition4}>Send Epoch edition 4</Button>\n                    </div>\n                </Paper>\n                </Grid>\n            \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n\n                <Dialog\n                            open={D5Visible}\n                            onClose={handleCloseD5}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{D5Title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{D5Text}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={handleCloseD5} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={handleCloseD5} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                {P5Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name:{alexandra[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{alexandra[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 5/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\"  onClick={sendEdition5}>Send Epoch edition 5</Button>\n                    </div>\n                </Paper>\n                </Grid>\n\n                \n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                <Dialog\n                                open={D6Visible}\n                                onClose={handleCloseD6}\n                                aria-labelledby=\"alert-dialog-title\"\n                                aria-describedby=\"alert-dialog-description\">\n\n                                <DialogTitle id=\"alert-dialog-title\">{D6Title}</DialogTitle>\n                                <DialogContent>\n                                <DialogContentText id=\"alert-dialog-description\">{D6Text}</DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                <Button onClick={handleCloseD6} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button onClick={handleCloseD6} color=\"primary\" autoFocus>\n                                    Ok\n                                </Button>\n                                </DialogActions>\n                            </Dialog>\n                {P6Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name: {amandaRoss[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address: </Typography>\n                    <Typography inline variant=\"subtitle1\" className={classes.typohraphy} style={{ wordWrap: \"break-word\",width:\"480px\" }}>{amandaRoss[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 6/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\"  onClick={sendEdition6}>Send Epoch edition 6</Button>\n                    </div>\n                </Paper>\n                </Grid>\n\n                <Grid item xs ={4}>\n                <Paper  elevation={3} className={classes.paper}>\n                <Dialog\n                                open={D7Visible}\n                                onClose={handleCloseD7}\n                                aria-labelledby=\"alert-dialog-title\"\n                                aria-describedby=\"alert-dialog-description\">\n\n                                <DialogTitle id=\"alert-dialog-title\">{D7Title}</DialogTitle>\n                                <DialogContent>\n                                <DialogContentText id=\"alert-dialog-description\">{D7Text}</DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                <Button onClick={handleCloseD7} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button onClick={handleCloseD7} color=\"primary\" autoFocus>\n                                    Ok\n                                </Button>\n                                </DialogActions>\n                            </Dialog>\n                {P7Loading? <CircularProgress color=\"primary\" className={classes.progress}/>:null}\n                <Typography className={classes.typohraphy}>Name: {hiradSab[0]} </Typography>\n                    <div className={classes.horDiv}>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}>Address:  </Typography>\n                    <Typography variant=\"subtitle1\" className={classes.typohraphy}  style={{ wordWrap: \"break-word\",width:\"480px\" }}>{hiradSab[1]}</Typography>\n                    </div>\n                    <Typography className={classes.typohraphy}>Edition: Epoch 7/8</Typography>\n\n                    {/* <Typography variant=\"subtitle1\" className={classes.typohraphy}>Received : true</Typography> */}\n                    <div className={classes.buttonDiv}>\n                        <Button variant =\"contained\" color = \"primary\" onClick={sendEdition7}>Send Epoch edition 7</Button>\n                    </div>\n                </Paper>\n                </Grid>\n\n            </Grid>\n        </div>\n    );\n\n    async function connectToWallet(){\n        return new Promise(async(resolve,reject)=>{\n            let addresses;\n            try{\n                addresses = await myalgoconnect.connect();\n                resolve(addresses)\n            }catch(error){\n                reject(error);\n            }       \n        });\n     \n    }\n    async function isConnected(){\n        return new Promise(async(resolve,reject)=>{\n            if(addresses.length==0){\n                try{\n                   let addr =  await connectToWallet()\n                   addresses= addr;\n                   console.log(addr);\n                   resolve(true);\n                }catch(error){\n                 console.error(error);\n                  reject(false);    \n                } \n             }else{\n                  resolve(true);\n             }\n        })\n       \n    }\n\n    async function sendEdition1(){\n        setP1Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP1Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,neilBerloufa[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[0],addresses[0].address,neilBerloufa[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD1Title(\"An Error occurred\")\n        setD1Text(JSON.stringify(error));\n        setD1Visible(true);\n        setP1Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP1Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD1Title(\"Success\");\n            setD1Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD1Title(\"An Error occurred\")\n                setD1Text(JSON.stringify(error));\n                setD1Visible(true);\n                setP1Loading(false)\n                return;\n        }\n    }\n\n\n    async function sendEdition2(){\n        setP2Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP2Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,sarahLosena[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[1],addresses[0].address,sarahLosena[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD2Title(\"An Error occurred\")\n        setD2Text(JSON.stringify(error));\n        setD2Visible(true);\n        setP2Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP2Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD2Title(\"Success\");\n            setD2Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD2Title(\"An Error occurred\")\n                setD2Text(JSON.stringify(error));\n                setD2Visible(true);\n                setP2Loading(false);\n                return;\n        }\n\n    }\n\n\n    async function sendEdition3(){\n        setP3Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP3Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,aliceBucknell[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[2],addresses[0].address,aliceBucknell[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD3Title(\"An Error occurred\")\n        setD3Text(JSON.stringify(error));\n        setD3Visible(true);\n        setP3Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP3Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD3Title(\"Success\");\n            setD3Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD3Title(\"An Error occurred\")\n                setD3Text(JSON.stringify(error));\n                setD3Visible(true);\n                setP3Loading(false);\n                return;\n        }\n\n    }\n    async function sendEdition4(){\n        setP4Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP4Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,juanCoveli[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[3],addresses[0].address,juanCoveli[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD4Title(\"An Error occurred\")\n        setD4Text(JSON.stringify(error));\n        setD4Visible(true);\n        setP4Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP4Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD4Title(\"Success\");\n            setD4Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD4Title(\"An Error occurred\")\n                setD4Text(JSON.stringify(error));\n                setD4Visible(true);\n                setP4Loading(false);\n                return;\n        }\n\n\n    }\n    async function sendEdition5(){\n        setP5Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP5Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,alexandra[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[4],addresses[0].address,alexandra[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD5Title(\"An Error occurred\")\n        setD5Text(JSON.stringify(error));\n        setD5Visible(true);\n        setP5Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP5Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD5Title(\"Success\");\n            setD5Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD5Title(\"An Error occurred\")\n                setD5Text(JSON.stringify(error));\n                setD5Visible(true);\n                setP5Loading(false);\n                return;\n        }\n    }\n\n\n    async function sendEdition6(){\n        setP6Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP6Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,amandaRoss[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[5],addresses[0].address,amandaRoss[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD6Title(\"An Error occurred\")\n        setD6Text(JSON.stringify(error));\n        setD6Visible(true);\n        setP6Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP6Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD6Title(\"Success\");\n            setD6Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD6Title(\"An Error occurred\")\n                setD6Text(JSON.stringify(error));\n                setD6Visible(true);\n                setP6Loading(false);\n                return;\n        }\n    }\n\n\n\n\n\n    async function sendEdition7(){\n        setP7Loading(true);\n        let boolVal = await isConnected();\n        if(!boolVal){\n            setP7Loading(false);\n            return;\n        }\n        console.log(addresses);\n    \n        let params = await client.getTransactionParams().do();\n        let appCallTxn =  makeApplicationCallTransaction(addresses[0].address,applicationId,[],params);\n        let zeroSendTxn = sendFunds(addresses[0].address,hiradSab[1],0,params);\n        let assetSendTxn = sendAsset(assetIds[6],addresses[0].address,hiradSab[1],1,client,params);\n\n        console.log(appCallTxn);\n        console.log(zeroSendTxn);\n        console.log(assetSendTxn);\n\n        let txns = [assetSendTxn,zeroSendTxn,appCallTxn];\n        let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el)=>{\n                el.group=groupId;\n                return el;\n                });\n\n    let signedTxn0 = algosdk.signLogicSigTransaction(txns[0], lsig)\n    let signedTxns ={};\n    try{\n        signedTxns =  await myalgoconnect.signTransaction([txns[1], txns[2]]);\n    }catch(error){\n        console.error(\"Error ocurred \", error);\n        // alert(error)\n        setD7Title(\"An Error occurred\")\n        setD7Text(JSON.stringify(error));\n        setD7Visible(true);\n        setP7Loading(false)\n    }\n   \n    let blobs = signedTxns.map((el,index)=>{\n        return el.blob\n    })\n\n    let signedTest = [signedTxn0.blob,...blobs];\n    console.log(signedTest)\n    let txTest={};\n    try{\n        txTest=(await client.sendRawTransaction(signedTest).do());\n        setP7Loading(false);\n        if(txTest.txId!=null&&txTest.txId!=undefined){\n            setD7Title(\"Success\");\n            setD7Text(`Transaction id: ${txTest.txId}`);\n        }\n      }catch(error){\n        console.error(\"Error ocurred \", error);\n                // alert(error)\n                setD7Title(\"An Error occurred\")\n                setD7Text(JSON.stringify(error));\n                setD7Visible(true);\n                setP7Loading(false);\n                return;\n        }\n    }\n\n    function makeApplicationCallTransaction(sender,appId,appArgs,params){\n        let txn = {\n            type: \"appl\",\n            appOnComplete: 0,\n            from: sender,\n            appIndex: appId,\n            fee: 1000,\n            flatFee: true,\n            ...params\n    };\n        return txn;\n    }\n\n    function sendFunds(sender,receiver,amount,params){\n        let    txn = {\n              ...params,\n              fee: 1000,\n              flatFee: true,\n              type: 'pay',\n              from: sender,\n              to:  receiver,\n              amount: amount,\n              note: new Uint8Array(Buffer.from('“FREEPORT” – featuring Neïl Beloufa, Sarah Rosalena Brady, Alice Bucknell, Juan Covelli, Alexandra Koumantaki, Amanda Ross-Ho, Hirad Sab\", 2001'))\n      };\n       \n          return txn;\n      }\n\n      function sendAsset(assetID,revocationTarget,recipient, units,algodClient,params){   \n\n       let closeRemainderTo = undefined;\n        //Amount of the asset to transfer\n       let  amount = units;\n\n        // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\n        let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(epochClawedBackAddress, recipient, closeRemainderTo, revocationTarget,\n                amount,  new Uint8Array(Buffer.from(\"FREEPORT” – featuring Neïl Beloufa, Sarah Rosalena Brady, Alice Bucknell, Juan Covelli, Alexandra Koumantaki, Amanda Ross-Ho, Hirad Sab\")), assetID, params);\n        let program = new Uint8Array(Buffer.from(epochBase64Address,\"base64\"))\n        const lsig = algosdk.makeLogicSig(program);   \n       console.log(lsig.address());\n        // let rawSignedTxn = algosdk.signLogicSigTransactionObject(xtxn, lsig)\n        return xtxn;\n    }\n    \n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:300,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    }\n  }));\nexport default ApSales;\n","export default __webpack_public_path__ + \"static/media/replicantImage.f37982d2.jpeg\";","import React, { useState } from 'react';\nimport replicantImage from '../assets/images/replicantImage.jpeg'\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { useTheme } from '@material-ui/core/styles';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Buffer } from 'buffer';\nimport Home from './Home';\nimport {BrowserRouter as Router,Switch,Route, useHistory} from 'react-router-dom';\n\n\n\n\nfunction HomeScreen(){\n    const classes = useStyles();\n    let history = useHistory();\n    return( <div  className ={classes.root}>\n``              <Grid container spacing ={3}>\n                    <Grid item xs = {4}>\n                        <Paper elevation = {3} className = {classes.paper}>\n                            <img src = {replicantImage} className = {classes.replicantImage}/>\n                            <h1 className ={classes.itemTitle}>Replicant Nft</h1>\n                            <Button variant =\"contained\" onClick = {moveToNftCreationScreen} color=\"primary\"  className = {classes.itemButton}>\n                                Create Replicant Nft \n                            </Button>\n                        </Paper>\n                    </Grid>\n                </Grid>\n        </div>)\n\n    function moveToNftCreationScreen(){\n        history.push('/replicant-creation')\n    }\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:340,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    },\n    replicantImage: {\n        width: '80%',\n        height: 'auto',\n        borderRadius:'5px',\n        marginTop: '0px',\n        border: '5px',\n        textAlign: 'center',\n        borderColor: '#ff0000',\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    itemTitle:{\n        borderColor: '#ff0000',\n        width:'80%',\n        fontSize: '16px',\n        marginTop: '8px',\n        textAlign: 'center',\n        color:theme.palette.primary.main,\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    itemButton:{\n        marginLeft:'auto',\n        marginRight:'auto'\n    }\n  }));\n\n  export default HomeScreen;","import React from 'react';\nimport HomeScreen from './HomeScreen';\nexport default function Home(){\n    return <div>\n                <HomeScreen>\n                    \n                </HomeScreen>\n            </div>\n}","import React, { useState } from 'react';\nimport replicantImage from '../assets/images/replicantImage.jpeg'\nimport {Button,Typography,CircularProgress,LinearProgress} from '@material-ui/core';\nimport {Grid} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { useTheme } from '@material-ui/core/styles';\nimport algosdk from 'algosdk';\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport { Buffer } from 'buffer';\nimport Home from './Home';\nimport {createAsa,clawbackAsa,connectToWallet,isConnected,replicantAsaInfo,getAsaToClawbackInfo} from '../utils/utils';\n\n\nfunction ReplicantNftCreation(){\n    let signerAddress = []\n    let epochAddress = \"VTAUB5LOVTWKXICWEDBO5UG2JNNGEW7ULRB4PQB23DGRKSAXDVPORQNZJE\";\n    const token = { 'X-API-Key':'QIbtJ2qVvz8IUKIJiprmm2pRf2yutg14eOS98d15'};\n    const server = \"https://mainnet-algorand.api.purestake.io/ps2\";\n    const baseServer = \"https://mainnet-algorand.api.purestake.io/idx2\";\n    const port = '';\n    const client = new algosdk.Algodv2(token, server, port);\n    let indexerClient = new algosdk.Indexer(token, baseServer, port);\n    const classes = useStyles();\n    const [loading,setLoading] = useState(false);\n    const [dialogVisible, controlDialog] = useState(false);\n    const [dialogTitle, setDialogTitle] = useState(\"\");\n    const [dialogDescription, setDialogDescription] = useState(\"\")\n    return (<div className = {classes.root}>\n                <Grid container spacing = {2}>\n                    {/* <Paper elevation = {3}><CircularProgress color=\"primary\" className={classes.progress}/></Paper> */}\n                    <Grid item xs = {12}>\n                        <Paper elevation = {3} className = {classes.paper}>\n                            { loading? <CircularProgress color=\"secondary\" className={classes.progress}/>: null}\n                            <Dialog\n                            open={dialogVisible}\n                            onClose={() => controlDialog(false)}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n\n                            <DialogTitle id=\"alert-dialog-title\">{dialogTitle}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">{dialogDescription}</DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={() => controlDialog(false)} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={() => controlDialog(false)} color=\"primary\" autoFocus>\n                                Ok\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                        <h1 className ={classes.itemTitle}>Create and Configure Replicant NFTS</h1>\n                            <img src = {replicantImage} className = {classes.replicantImage}/>\n                            <h1 className ={classes.itemTitle}>Kindly click on the respective buttons to create completely the Replicant Nfts</h1>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs = {6} className = {classes.centerGridItem}>\n                    <Button onClick = {create16OfReplicantNftsUsingWalletConnect} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Create 16 of the Replicant Nfts \n                    </Button>\n                    </Grid>\n                    <Grid item xs = {6}  className = {classes.centerGridItem}>\n                    <Button onClick = {create14OfReplicantNftsUsingWalletConnect} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Create the remaining 14 of the Replicant Nfts\n                    </Button>\n                    </Grid>\n                    \n\n                    <Grid item xs = {6} className = {classes.centerGridItem}>\n                    <Button onClick = {clawback16OfReplicantNftsUsingWalletConnect} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Clawback 16 of the Replicant Nfts\n                    </Button>\n                    </Grid>\n                    <Grid item xs = {6}  className = {classes.centerGridItem}>\n                    <Button onClick = {clawback14OfReplicantNftsUsingWalletConnect} variant =\"contained\" color=\"primary\"  className = {classes.itemButton}>\n                            Clawback the remaining 14 of the Replicant Nfts\n                    </Button>\n                    </Grid>\n                </Grid>\n            </div>);\n\n\n    async function Create16OfReplicantNft(){\n\n    }\n\n   async function create16OfReplicantNFTsUsingMyAlgo(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params);\n        let txnsToSign = [];\n        replicantAsaInfo.map((el,index) => {\n            if(index < 16){\n                txnsToSign.push(createAsa(params, epochAddress, el.name, el.unit ,el.decimals, el.total, el.url, epochAddress, epochAddress, epochAddress, true, el.metadataHash, el.note))\n            }  \n        })\n       console.log(txnsToSign.length);\n       console.log(txnsToSign);\n\n       let groupId = algosdk.computeGroupID(txnsToSign);\n       txnsToSign = txnsToSign.map((el) => {\n                el.group=groupId;\n                return el;\n                });\n        let signedTxns = {};\n        try{\n            signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n        }catch(error){\n            console.error(\"Error ocurred \", error);\n            alert(error)\n            setLoading(false);\n        }\n        let blobs = signedTxns.map((el,index)=>{\n            return el.blob\n        });\n        console.log(blobs);\n       \n        let txTest={};\n        try{\n            txTest=(await client.sendRawTransaction(blobs).do());\n            console.log(txTest);\n            setLoading(false);\n            controlDialog(true);\n            setDialogTitle(\"Transaction Success\");\n            setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n          }catch(error){\n            console.error(\"Error ocurred \", error);\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n            return;\n            }     \n        \n    }\n    async function createRemaining14OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params);\n        let txnsToSign = [];\n        replicantAsaInfo.map((el,index) => {\n            if(index >= 16 && index < 30){\n                txnsToSign.push(createAsa(params, epochAddress, el.name, el.unit ,el.decimals, el.total, el.url, epochAddress, epochAddress, epochAddress, true, el.metadataHash, el.note))\n            }  \n        })\n       console.log(txnsToSign.length);\n       console.log(txnsToSign);\n\n       let groupId = algosdk.computeGroupID(txnsToSign);\n       txnsToSign = txnsToSign.map((el) => {\n                el.group=groupId;\n                return el;\n                });\n        let signedTxns = {};\n        try{\n            signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n        }catch(error){\n            console.error(\"Error ocurred \", error);\n            alert(error)\n            setLoading(false);\n        }\n        let blobs = signedTxns.map((el,index)=>{\n            return el.blob\n        })\n        console.log(blobs);\n       \n        let txTest={};\n        try{\n            txTest=(await client.sendRawTransaction(blobs).do());\n            console.log(txTest);\n            setLoading(false);\n            controlDialog(true);\n            setDialogTitle(\"Transaction Success\");\n            setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n          }catch(error){\n            console.error(\"Error ocurred \", error);\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n            return;\n            }    \n    }\n\n    async function clawback16OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let txnsToSign = getAsaToClawbackInfo(params,epochAddress,epochAddress,epochAddress,epochAddress,epochAddress).map((el,index) => {\n            if(index < 16){\n                return el;\n            }\n        });\n        console.log(txnsToSign.length);\n        console.log(txnsToSign);\n \n        let groupId = algosdk.computeGroupID(txnsToSign);\n        txnsToSign = txnsToSign.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         })\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }    \n\n    }\n   async function clawbackRemaining14OfReplicantNFTs(){\n        let myalgoconnect = new MyAlgoConnect();\n        if(signerAddress.length == 0){\n            setLoading(true)\n            try{\n                signerAddress = await isConnected(signerAddress,myalgoconnect);\n            }catch(error){\n                setLoading(false);\n                controlDialog(true);\n                setDialogTitle(\"Error\");\n                setDialogDescription(JSON.stringify(error));\n                return;\n            }\n        }\n        // if(signerAddress[0] != epochAddress){\n        //     alert(`The address ${signerAddress[0].address} does not match the epoch address`);\n        //     console.log(signerAddress[0])\n        //     return;\n        // }\n        epochAddress = signerAddress[0].address;\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        let txnsToSign = getAsaToClawbackInfo(params,epochAddress,epochAddress,epochAddress,epochAddress,epochAddress).map((el,index) => {\n            if(index >= 16 && index < 30){\n                return el;\n            }\n        });\n        console.log(txnsToSign.length);\n        console.log(txnsToSign);\n \n        let groupId = algosdk.computeGroupID(txnsToSign);\n        txnsToSign = txnsToSign.map((el) => {\n                 el.group=groupId;\n                 return el;\n                 });\n         let signedTxns = {};\n         try{\n             signedTxns =  await myalgoconnect.signTransaction(txnsToSign);\n         }catch(error){\n             console.error(\"Error ocurred \", error);\n             alert(error)\n             setLoading(false);\n         }\n         let blobs = signedTxns.map((el,index)=>{\n             return el.blob\n         })\n         console.log(blobs);\n        \n         let txTest={};\n         try{\n             txTest=(await client.sendRawTransaction(blobs).do());\n             console.log(txTest);\n             setLoading(false);\n             controlDialog(true);\n             setDialogTitle(\"Transaction Success\");\n             setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n           }catch(error){\n             console.error(\"Error ocurred \", error);\n             controlDialog(true);\n             setDialogTitle(\"Error\");\n             setDialogDescription(JSON.stringify(error));\n             setLoading(false);\n             return;\n             }    \n    }\n\n    async function create16OfReplicantNftsUsingWalletConnect(){\n        setLoading(true)\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                replicantAsaInfo.map((el,index) => {\n                    if(index < 16){\n                        txns.push(algosdk.makeAssetCreateTxnWithSuggestedParams(accounts[0], el.note,\n                            el.total, el.decimals, true, accounts[0], accounts[0], accounts[0],\n                            accounts[0], el.unit, el.name, el.url, el.metadataHash, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n              \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n\n    async function create14OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                replicantAsaInfo.map((el,index) => {\n                    if(index >= 16 && index < 30){\n                        txns.push(algosdk.makeAssetCreateTxnWithSuggestedParams(accounts[0], el.note,\n                            el.total, el.decimals, true, accounts[0], accounts[0], accounts[0],\n                            accounts[0], el.unit, el.name, el.url, el.metadataHash, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n    async function clawback14OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                getAsaToClawbackInfo(params,accounts[0],accounts[0],accounts[0],accounts[0],accounts[0]).map((el,index) => {\n                    if(index >= 16 && index < 30){\n                        txns.push(algosdk.makeAssetConfigTxnWithSuggestedParams(accounts[0], el.note, \n                            el.assetIndex, accounts[0], accounts[0], accounts[0], el.assetClawback, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n              });\n              \n            //   connector.killSession();\n    }\n\n\n\n\n    async function clawback16OfReplicantNftsUsingWalletConnect(){\n        setLoading(true);\n        let txns = [];\n        let params = {}\n        try{\n            params = await client.getTransactionParams().do();\n        }catch(error){\n            controlDialog(true);\n            setDialogTitle(\"Error\");\n            setDialogDescription(JSON.stringify(error));\n            setLoading(false);\n        } \n        console.log(params)\n        const connector = new WalletConnect({\n            bridge: \"https://bridge.walletconnect.org\", // Required\n            qrcodeModal: QRCodeModal,\n          });\n\n          // Check if connection is already established\n            if (!connector.connected) {\n                // create new session\n                connector.createSession();\n            }\n            \n            // Subscribe to connection events\n            connector.on(\"connect\", async(error, payload) => {\n                if (error) {\n                throw error;\n                }\n            try {\n                // Get provided accounts\n                const { accounts } = payload.params[0];\n                console.log(accounts,\"connect\");\n                getAsaToClawbackInfo(params,accounts[0],accounts[0],accounts[0],accounts[0],accounts[0]).map((el,index) => {\n                    if(index < 16){\n                        txns.push(algosdk.makeAssetConfigTxnWithSuggestedParams(accounts[0], el.note, \n                            el.assetIndex, accounts[0], accounts[0], accounts[0], el.assetClawback, params));\n                    }  \n                });\n\n                console.log(txns,\"txns\");\n\n\n                let groupId = algosdk.computeGroupID(txns);\n                txns = txns.map((el) => {\n                         el.group=groupId;\n                         return el;\n                         });\n\n                const txnsToSign = txns.map(txn => {\n                    const encodedTxn = Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\");\n                    return {\n                      txn: encodedTxn,\n                      message: 'Description of transaction being signed',\n                    };\n                  });\n                  console.log(txnsToSign,\"txnsTosIGN\")\n                  const requestParams = [txnsToSign];\n                  console.log(requestParams);\n                  const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n                  console.log(request,\"request\");\n                 const result = await connector.sendCustomRequest(request);\n                  console.log(result,\"Result\");\n                  const decodedResult = result.map(element => {\n                    return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n                  });\n\n                  console.log(decodedResult,\"decoded result\");\n                  let txTest={};\n                  connector.killSession();\n                      txTest=(await client.sendRawTransaction(decodedResult).do());\n                      console.log(txTest);\n                      setLoading(false);\n                      controlDialog(true);\n                      setDialogTitle(\"Transaction Success\");\n                      setDialogDescription(JSON.stringify(`Transaction successful with transaction id: ${txTest.txId}`));\n                }catch(error){\n                    connector.killSession();\n                    console.error(error);\n                    console.error(\"Error ocurred \", error);\n                      controlDialog(true);\n                      setDialogTitle(\"Error\");\n                      setDialogDescription(JSON.stringify(error));\n                      setLoading(false);\n                  \n                }\n               \n            });\n\n            connector.on(\"session_update\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n              \n                // Get updated accounts \n                const { accounts } = payload.params[0];\n                console.log(accounts,\"session_update\");\n              });\n\n            connector.on(\"disconnect\", (error, payload) => {\n                if (error) {\n                  throw error;\n                }\n                console.log(payload,\"disconnect\")\n                // connector.killSession();\n              });\n              \n            //   connector.killSession();\n    }\n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop:20,\n      marginLeft:15,\n      marginRight:15\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      height:390,\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:'flex-start',\n      position:'relative'\n    },\n    typohraphy:{\n        fontSize:\"1\",\n        color:\"#000\",\n        textAlign:'start',\n        marginTop:\"15px\"\n    },\n    horDiv:{\n        display:'flex',\n        flexDirection:'row',\n        justifyContent:'center'\n    },\n    buttonDiv:{\n        // border:\"solid 2px #000\",\n        width: \"100%\",\n        marginTop:\"20px\"\n    },\n    progress:{\n        display:'flex',\n        position:'absolute',\n        top:\"50%\",\n        left:'50%'\n\n    },\n    replicantImage: {\n        width: '80%',\n        height: '340px',\n        borderRadius:'5px',\n        marginTop: '0px',\n        border: '5px',\n        textAlign: 'center',\n        borderColor: '#ff0000',\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    itemTitle:{\n        borderColor: '#ff0000',\n        width:'80%',\n        fontSize: '16px',\n        marginTop: '8px',\n        textAlign: 'center',\n        color:theme.palette.primary.main,\n        marginLeft:'auto',\n        marginRight:'auto'\n    },\n    centerGridItem:{\n        textAlign: 'center',\n    },\n    itemButton:{\n        marginLeft:'auto',\n        marginRight:'auto',\n        width:'60%'\n    }\n  }));\n\n\nexport default ReplicantNftCreation;\n\n\n\n","\nimport logo from './logo.svg';\nimport './App.css';\nimport React  from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button';\nimport Drawer from '@material-ui/core/Drawer';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport HomeIcon from '@material-ui/icons/Home';\nimport CartIcon from '@material-ui/icons/ShoppingCart';\nimport ApSales from './screens/ApSales';\nimport ReplicantNftCreation from './screens/ReplicantNftCreation';\nimport Home from './screens/Home';\n\nimport {BrowserRouter as Router,Switch,Route, useHistory} from 'react-router-dom';\n\nfunction App(props) {\n  const classes = useStyles();\n  let history = useHistory();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n  const [pageTitle, setPageTitle]= React.useState('Epoch Nfts');\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor)=>{\n    return(<div className={classes.list}\n            role = \"presentation\"\n            onClick={toggleDrawer(anchor,false)}\n            onKeyDown={toggleDrawer(anchor,false)}>\n              \n              <List>\n                  <ListItem button key = \"Epoch Home\"\n                    onClick={(event)=>{setPageTitle(\"Epoch Home\"); history.push(\"/\")}}>\n                    <ListItemIcon>\n                      <HomeIcon />\n                      <ListItemText primary={\"Epoch Home\"} />\n                    </ListItemIcon>\n                  </ListItem>\n                  <ListItem button key = \"Replicant AP Sales\"\n                  onClick={(event)=>{\n                    setPageTitle(\"Replicant AP Sales\"); \n                    history.push(\"/apsales\")\n                  }}>\n                  <ListItemIcon>\n                      <CartIcon />\n                      <ListItemText primary={\"Replicant AP Sales\"} />\n                    </ListItemIcon>\n                  </ListItem>\n              </List>\n           </div>)\n  }\n  \n\n  return (\n    \n      <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\"\n              onClick={(event)=>{setState({...state,left:true})}}>\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" className={classes.title}>\n                {pageTitle}\n              </Typography>\n              <Button color=\"inherit\">Login</Button>\n            </Toolbar>\n          </AppBar>\n          <Drawer anchor={\"left\"} open={state.left} onClose={toggleDrawer(\"left\", false)}>\n          {list(\"left\")}\n        </Drawer>\n    \n        <Switch>\n            <Route path = \"/replicant-creation\">\n             {() =>  {\n              setPageTitle('Replicant Nft Creation');\n           return (<ReplicantNftCreation/>)\n             }}\n            </Route>\n            <Route path = \"/apsales\">\n              <ApSales/>\n            </Route>\n            <Route path = \"/\">\n              <Home/>\n            </Route>\n        </Switch>\n\n      </div>\n \n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n}));\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}